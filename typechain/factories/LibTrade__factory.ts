/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { LibTrade, LibTradeInterface } from "../LibTrade";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "MAX_PERCENTAGE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6088610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80634c255c97146038575b600080fd5b604061271081565b60405190815260200160405180910390f3fea2646970667358221220b144101a5c3bd1500184c6dc20cc1a56e7419fa4e79c265edf3e7cd542c52c8764736f6c63430008140033";

export class LibTrade__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibTrade> {
    return super.deploy(overrides || {}) as Promise<LibTrade>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibTrade {
    return super.attach(address) as LibTrade;
  }
  connect(signer: Signer): LibTrade__factory {
    return super.connect(signer) as LibTrade__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibTradeInterface {
    return new utils.Interface(_abi) as LibTradeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibTrade {
    return new Contract(address, _abi, signerOrProvider) as LibTrade;
  }
}
