/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { LensFacet, LensFacetInterface } from "../LensFacet";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "HighSlippage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toAmount",
        type: "uint256",
      },
    ],
    name: "calculateExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "exchangeRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSlippage",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
    ],
    name: "validateSlippage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610414806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632167860b1461003b57806344105bf114610060575b600080fd5b61004e6100493660046101d9565b610073565b60405190815260200160405180910390f35b61004e61006e36600461021a565b610088565b600061008084848461009f565b949350505050565b600061009685858585610138565b95945050505050565b6000808490506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101099190610260565b60ff1690508461011a82600a610386565b6101249086610392565b61012e91906103a9565b9695505050505050565b6000808561014861271087610392565b61015291906103a9565b9050828015610162575061271081105b8015610178575083610176826127106103cb565b115b1561019657604051634c9b2c5960e01b815260040160405180910390fd5b821580156101a5575061271081115b80156101bb5750836101b9612710836103cb565b115b1561009657604051634c9b2c5960e01b815260040160405180910390fd5b6000806000606084860312156101ee57600080fd5b83356001600160a01b038116811461020557600080fd5b95602085013595506040909401359392505050565b6000806000806080858703121561023057600080fd5b8435935060208501359250604085013591506060850135801515811461025557600080fd5b939692955090935050565b60006020828403121561027257600080fd5b815160ff8116811461028357600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156102db5781600019048211156102c1576102c161028a565b808516156102ce57918102915b93841c93908002906102a5565b509250929050565b6000826102f257506001610380565b816102ff57506000610380565b8160018114610315576002811461031f5761033b565b6001915050610380565b60ff8411156103305761033061028a565b50506001821b610380565b5060208310610133831016604e8410600b841016171561035e575081810a610380565b61036883836102a0565b806000190482111561037c5761037c61028a565b0290505b92915050565b600061028383836102e3565b80820281158282048414176103805761038061028a565b6000826103c657634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156103805761038061028a56fea2646970667358221220c7c2e3b48521ba9cdde60dd2082e4aad5187b84a52224a822ee3fb166f856ba564736f6c63430008140033";

export class LensFacet__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LensFacet> {
    return super.deploy(overrides || {}) as Promise<LensFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LensFacet {
    return super.attach(address) as LensFacet;
  }
  connect(signer: Signer): LensFacet__factory {
    return super.connect(signer) as LensFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LensFacetInterface {
    return new utils.Interface(_abi) as LensFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LensFacet {
    return new Contract(address, _abi, signerOrProvider) as LensFacet;
  }
}
