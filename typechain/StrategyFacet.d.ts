/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StrategyFacetInterface extends ethers.utils.Interface {
  functions: {
    "cancelStrategy(uint256)": FunctionFragment;
    "createStrategy((address,uint256,address,uint256,uint256,bool,uint8,uint256,bool,bool,bool,uint8,uint256,bool,uint256,uint8,bool,uint256,uint8,uint8,uint256,bool,uint8,uint256,uint256,bool,uint256,uint8,uint8,uint256,bool,uint256,uint8,bool,uint8))": FunctionFragment;
    "getStrategy(uint256)": FunctionFragment;
    "nextStartegyId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [
      {
        _investToken: string;
        _investAmount: BigNumberish;
        _stableToken: string;
        _stableAmount: BigNumberish;
        _slippage: BigNumberish;
        _floor: boolean;
        _floorType: BigNumberish;
        _floorValue: BigNumberish;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: BigNumberish;
        _buyValue: BigNumberish;
        _buyTwap: boolean;
        _buyTwapTime: BigNumberish;
        _buyTwapTimeUnit: BigNumberish;
        _btd: boolean;
        _btdValue: BigNumberish;
        _btdType: BigNumberish;
        _buyDCAUnit: BigNumberish;
        _buyDCAValue: BigNumberish;
        _sell: boolean;
        _sellType: BigNumberish;
        _sellValue: BigNumberish;
        _highSellValue: BigNumberish;
        _str: boolean;
        _strValue: BigNumberish;
        _strType: BigNumberish;
        _sellDCAUnit: BigNumberish;
        _sellDCAValue: BigNumberish;
        _sellTwap: boolean;
        _sellTwapTime: BigNumberish;
        _sellTwapTimeUnit: BigNumberish;
        _completeOnSell: boolean;
        _current_price: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextStartegyId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextStartegyId",
    data: BytesLike
  ): Result;

  events: {
    "StrategyCancelled(uint256)": EventFragment;
    "StrategyCreated(address,address,tuple,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StrategyCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyCreated"): EventFragment;
}

export type StrategyCancelledEvent = TypedEvent<
  [BigNumber] & { strategyId: BigNumber }
>;

export type StrategyCreatedEvent = TypedEvent<
  [
    string,
    string,
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean,
      number,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number,
      BigNumber,
      boolean,
      BigNumber,
      number,
      boolean,
      BigNumber,
      number,
      number,
      BigNumber,
      boolean,
      number,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      number,
      number,
      BigNumber,
      boolean,
      BigNumber,
      number,
      boolean,
      number
    ] & {
      _investToken: string;
      _investAmount: BigNumber;
      _stableToken: string;
      _stableAmount: BigNumber;
      _slippage: BigNumber;
      _floor: boolean;
      _floorType: number;
      _floorValue: BigNumber;
      _liquidateOnFloor: boolean;
      _cancelOnFloor: boolean;
      _buy: boolean;
      _buyType: number;
      _buyValue: BigNumber;
      _buyTwap: boolean;
      _buyTwapTime: BigNumber;
      _buyTwapTimeUnit: number;
      _btd: boolean;
      _btdValue: BigNumber;
      _btdType: number;
      _buyDCAUnit: number;
      _buyDCAValue: BigNumber;
      _sell: boolean;
      _sellType: number;
      _sellValue: BigNumber;
      _highSellValue: BigNumber;
      _str: boolean;
      _strValue: BigNumber;
      _strType: number;
      _sellDCAUnit: number;
      _sellDCAValue: BigNumber;
      _sellTwap: boolean;
      _sellTwapTime: BigNumber;
      _sellTwapTimeUnit: number;
      _completeOnSell: boolean;
      _current_price: number;
    },
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    investToken: string;
    stableToken: string;
    parameter: [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      boolean,
      number,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number,
      BigNumber,
      boolean,
      BigNumber,
      number,
      boolean,
      BigNumber,
      number,
      number,
      BigNumber,
      boolean,
      number,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      number,
      number,
      BigNumber,
      boolean,
      BigNumber,
      number,
      boolean,
      number
    ] & {
      _investToken: string;
      _investAmount: BigNumber;
      _stableToken: string;
      _stableAmount: BigNumber;
      _slippage: BigNumber;
      _floor: boolean;
      _floorType: number;
      _floorValue: BigNumber;
      _liquidateOnFloor: boolean;
      _cancelOnFloor: boolean;
      _buy: boolean;
      _buyType: number;
      _buyValue: BigNumber;
      _buyTwap: boolean;
      _buyTwapTime: BigNumber;
      _buyTwapTimeUnit: number;
      _btd: boolean;
      _btdValue: BigNumber;
      _btdType: number;
      _buyDCAUnit: number;
      _buyDCAValue: BigNumber;
      _sell: boolean;
      _sellType: number;
      _sellValue: BigNumber;
      _highSellValue: BigNumber;
      _str: boolean;
      _strValue: BigNumber;
      _strType: number;
      _sellDCAUnit: number;
      _sellDCAValue: BigNumber;
      _sellTwap: boolean;
      _sellTwapTime: BigNumber;
      _sellTwapTimeUnit: number;
      _completeOnSell: boolean;
      _current_price: number;
    };
    timestamp: BigNumber;
    investRoundId: BigNumber;
    stableRoundId: BigNumber;
    price: BigNumber;
  }
>;

export class StrategyFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StrategyFacetInterface;

  functions: {
    cancelStrategy(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStrategy(
      _parameter: {
        _investToken: string;
        _investAmount: BigNumberish;
        _stableToken: string;
        _stableAmount: BigNumberish;
        _slippage: BigNumberish;
        _floor: boolean;
        _floorType: BigNumberish;
        _floorValue: BigNumberish;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: BigNumberish;
        _buyValue: BigNumberish;
        _buyTwap: boolean;
        _buyTwapTime: BigNumberish;
        _buyTwapTimeUnit: BigNumberish;
        _btd: boolean;
        _btdValue: BigNumberish;
        _btdType: BigNumberish;
        _buyDCAUnit: BigNumberish;
        _buyDCAValue: BigNumberish;
        _sell: boolean;
        _sellType: BigNumberish;
        _sellValue: BigNumberish;
        _highSellValue: BigNumberish;
        _str: boolean;
        _strValue: BigNumberish;
        _strType: BigNumberish;
        _sellDCAUnit: BigNumberish;
        _sellDCAValue: BigNumberish;
        _sellTwap: boolean;
        _sellTwapTime: BigNumberish;
        _sellTwapTimeUnit: BigNumberish;
        _completeOnSell: boolean;
        _current_price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStrategy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          [
            string,
            BigNumber,
            string,
            BigNumber,
            BigNumber,
            boolean,
            number,
            BigNumber,
            boolean,
            boolean,
            boolean,
            number,
            BigNumber,
            boolean,
            BigNumber,
            number,
            boolean,
            BigNumber,
            number,
            number,
            BigNumber,
            boolean,
            number,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            number,
            number,
            BigNumber,
            boolean,
            BigNumber,
            number,
            boolean,
            number
          ] & {
            _investToken: string;
            _investAmount: BigNumber;
            _stableToken: string;
            _stableAmount: BigNumber;
            _slippage: BigNumber;
            _floor: boolean;
            _floorType: number;
            _floorValue: BigNumber;
            _liquidateOnFloor: boolean;
            _cancelOnFloor: boolean;
            _buy: boolean;
            _buyType: number;
            _buyValue: BigNumber;
            _buyTwap: boolean;
            _buyTwapTime: BigNumber;
            _buyTwapTimeUnit: number;
            _btd: boolean;
            _btdValue: BigNumber;
            _btdType: number;
            _buyDCAUnit: number;
            _buyDCAValue: BigNumber;
            _sell: boolean;
            _sellType: number;
            _sellValue: BigNumber;
            _highSellValue: BigNumber;
            _str: boolean;
            _strValue: BigNumber;
            _strType: number;
            _sellDCAUnit: number;
            _sellDCAValue: BigNumber;
            _sellTwap: boolean;
            _sellTwapTime: BigNumber;
            _sellTwapTimeUnit: number;
            _completeOnSell: boolean;
            _current_price: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          user: string;
          parameters: [
            string,
            BigNumber,
            string,
            BigNumber,
            BigNumber,
            boolean,
            number,
            BigNumber,
            boolean,
            boolean,
            boolean,
            number,
            BigNumber,
            boolean,
            BigNumber,
            number,
            boolean,
            BigNumber,
            number,
            number,
            BigNumber,
            boolean,
            number,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            number,
            number,
            BigNumber,
            boolean,
            BigNumber,
            number,
            boolean,
            number
          ] & {
            _investToken: string;
            _investAmount: BigNumber;
            _stableToken: string;
            _stableAmount: BigNumber;
            _slippage: BigNumber;
            _floor: boolean;
            _floorType: number;
            _floorValue: BigNumber;
            _liquidateOnFloor: boolean;
            _cancelOnFloor: boolean;
            _buy: boolean;
            _buyType: number;
            _buyValue: BigNumber;
            _buyTwap: boolean;
            _buyTwapTime: BigNumber;
            _buyTwapTimeUnit: number;
            _btd: boolean;
            _btdValue: BigNumber;
            _btdType: number;
            _buyDCAUnit: number;
            _buyDCAValue: BigNumber;
            _sell: boolean;
            _sellType: number;
            _sellValue: BigNumber;
            _highSellValue: BigNumber;
            _str: boolean;
            _strValue: BigNumber;
            _strType: number;
            _sellDCAUnit: number;
            _sellDCAValue: BigNumber;
            _sellTwap: boolean;
            _sellTwapTime: BigNumber;
            _sellTwapTimeUnit: number;
            _completeOnSell: boolean;
            _current_price: number;
          };
          sellTwapExecutedAt: BigNumber;
          buyTwapExecutedAt: BigNumber;
          investRoundId: BigNumber;
          stableRoundId: BigNumber;
          investPrice: BigNumber;
          profit: BigNumber;
          budget: BigNumber;
          status: number;
        }
      ]
    >;

    nextStartegyId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelStrategy(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createStrategy(
    _parameter: {
      _investToken: string;
      _investAmount: BigNumberish;
      _stableToken: string;
      _stableAmount: BigNumberish;
      _slippage: BigNumberish;
      _floor: boolean;
      _floorType: BigNumberish;
      _floorValue: BigNumberish;
      _liquidateOnFloor: boolean;
      _cancelOnFloor: boolean;
      _buy: boolean;
      _buyType: BigNumberish;
      _buyValue: BigNumberish;
      _buyTwap: boolean;
      _buyTwapTime: BigNumberish;
      _buyTwapTimeUnit: BigNumberish;
      _btd: boolean;
      _btdValue: BigNumberish;
      _btdType: BigNumberish;
      _buyDCAUnit: BigNumberish;
      _buyDCAValue: BigNumberish;
      _sell: boolean;
      _sellType: BigNumberish;
      _sellValue: BigNumberish;
      _highSellValue: BigNumberish;
      _str: boolean;
      _strValue: BigNumberish;
      _strType: BigNumberish;
      _sellDCAUnit: BigNumberish;
      _sellDCAValue: BigNumberish;
      _sellTwap: boolean;
      _sellTwapTime: BigNumberish;
      _sellTwapTimeUnit: BigNumberish;
      _completeOnSell: boolean;
      _current_price: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStrategy(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        number,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number,
        BigNumber,
        boolean,
        BigNumber,
        number,
        boolean,
        BigNumber,
        number,
        number,
        BigNumber,
        boolean,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number,
        number,
        BigNumber,
        boolean,
        BigNumber,
        number,
        boolean,
        number
      ] & {
        _investToken: string;
        _investAmount: BigNumber;
        _stableToken: string;
        _stableAmount: BigNumber;
        _slippage: BigNumber;
        _floor: boolean;
        _floorType: number;
        _floorValue: BigNumber;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: number;
        _buyValue: BigNumber;
        _buyTwap: boolean;
        _buyTwapTime: BigNumber;
        _buyTwapTimeUnit: number;
        _btd: boolean;
        _btdValue: BigNumber;
        _btdType: number;
        _buyDCAUnit: number;
        _buyDCAValue: BigNumber;
        _sell: boolean;
        _sellType: number;
        _sellValue: BigNumber;
        _highSellValue: BigNumber;
        _str: boolean;
        _strValue: BigNumber;
        _strType: number;
        _sellDCAUnit: number;
        _sellDCAValue: BigNumber;
        _sellTwap: boolean;
        _sellTwapTime: BigNumber;
        _sellTwapTimeUnit: number;
        _completeOnSell: boolean;
        _current_price: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      user: string;
      parameters: [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean,
        number,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number,
        BigNumber,
        boolean,
        BigNumber,
        number,
        boolean,
        BigNumber,
        number,
        number,
        BigNumber,
        boolean,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number,
        number,
        BigNumber,
        boolean,
        BigNumber,
        number,
        boolean,
        number
      ] & {
        _investToken: string;
        _investAmount: BigNumber;
        _stableToken: string;
        _stableAmount: BigNumber;
        _slippage: BigNumber;
        _floor: boolean;
        _floorType: number;
        _floorValue: BigNumber;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: number;
        _buyValue: BigNumber;
        _buyTwap: boolean;
        _buyTwapTime: BigNumber;
        _buyTwapTimeUnit: number;
        _btd: boolean;
        _btdValue: BigNumber;
        _btdType: number;
        _buyDCAUnit: number;
        _buyDCAValue: BigNumber;
        _sell: boolean;
        _sellType: number;
        _sellValue: BigNumber;
        _highSellValue: BigNumber;
        _str: boolean;
        _strValue: BigNumber;
        _strType: number;
        _sellDCAUnit: number;
        _sellDCAValue: BigNumber;
        _sellTwap: boolean;
        _sellTwapTime: BigNumber;
        _sellTwapTimeUnit: number;
        _completeOnSell: boolean;
        _current_price: number;
      };
      sellTwapExecutedAt: BigNumber;
      buyTwapExecutedAt: BigNumber;
      investRoundId: BigNumber;
      stableRoundId: BigNumber;
      investPrice: BigNumber;
      profit: BigNumber;
      budget: BigNumber;
      status: number;
    }
  >;

  nextStartegyId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelStrategy(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createStrategy(
      _parameter: {
        _investToken: string;
        _investAmount: BigNumberish;
        _stableToken: string;
        _stableAmount: BigNumberish;
        _slippage: BigNumberish;
        _floor: boolean;
        _floorType: BigNumberish;
        _floorValue: BigNumberish;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: BigNumberish;
        _buyValue: BigNumberish;
        _buyTwap: boolean;
        _buyTwapTime: BigNumberish;
        _buyTwapTimeUnit: BigNumberish;
        _btd: boolean;
        _btdValue: BigNumberish;
        _btdType: BigNumberish;
        _buyDCAUnit: BigNumberish;
        _buyDCAValue: BigNumberish;
        _sell: boolean;
        _sellType: BigNumberish;
        _sellValue: BigNumberish;
        _highSellValue: BigNumberish;
        _str: boolean;
        _strValue: BigNumberish;
        _strType: BigNumberish;
        _sellDCAUnit: BigNumberish;
        _sellDCAValue: BigNumberish;
        _sellTwap: boolean;
        _sellTwapTime: BigNumberish;
        _sellTwapTimeUnit: BigNumberish;
        _completeOnSell: boolean;
        _current_price: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getStrategy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          boolean,
          number,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          number,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          number
        ] & {
          _investToken: string;
          _investAmount: BigNumber;
          _stableToken: string;
          _stableAmount: BigNumber;
          _slippage: BigNumber;
          _floor: boolean;
          _floorType: number;
          _floorValue: BigNumber;
          _liquidateOnFloor: boolean;
          _cancelOnFloor: boolean;
          _buy: boolean;
          _buyType: number;
          _buyValue: BigNumber;
          _buyTwap: boolean;
          _buyTwapTime: BigNumber;
          _buyTwapTimeUnit: number;
          _btd: boolean;
          _btdValue: BigNumber;
          _btdType: number;
          _buyDCAUnit: number;
          _buyDCAValue: BigNumber;
          _sell: boolean;
          _sellType: number;
          _sellValue: BigNumber;
          _highSellValue: BigNumber;
          _str: boolean;
          _strValue: BigNumber;
          _strType: number;
          _sellDCAUnit: number;
          _sellDCAValue: BigNumber;
          _sellTwap: boolean;
          _sellTwapTime: BigNumber;
          _sellTwapTimeUnit: number;
          _completeOnSell: boolean;
          _current_price: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        user: string;
        parameters: [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          boolean,
          number,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          number,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          number
        ] & {
          _investToken: string;
          _investAmount: BigNumber;
          _stableToken: string;
          _stableAmount: BigNumber;
          _slippage: BigNumber;
          _floor: boolean;
          _floorType: number;
          _floorValue: BigNumber;
          _liquidateOnFloor: boolean;
          _cancelOnFloor: boolean;
          _buy: boolean;
          _buyType: number;
          _buyValue: BigNumber;
          _buyTwap: boolean;
          _buyTwapTime: BigNumber;
          _buyTwapTimeUnit: number;
          _btd: boolean;
          _btdValue: BigNumber;
          _btdType: number;
          _buyDCAUnit: number;
          _buyDCAValue: BigNumber;
          _sell: boolean;
          _sellType: number;
          _sellValue: BigNumber;
          _highSellValue: BigNumber;
          _str: boolean;
          _strValue: BigNumber;
          _strType: number;
          _sellDCAUnit: number;
          _sellDCAValue: BigNumber;
          _sellTwap: boolean;
          _sellTwapTime: BigNumber;
          _sellTwapTimeUnit: number;
          _completeOnSell: boolean;
          _current_price: number;
        };
        sellTwapExecutedAt: BigNumber;
        buyTwapExecutedAt: BigNumber;
        investRoundId: BigNumber;
        stableRoundId: BigNumber;
        investPrice: BigNumber;
        profit: BigNumber;
        budget: BigNumber;
        status: number;
      }
    >;

    nextStartegyId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "StrategyCancelled(uint256)"(
      strategyId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { strategyId: BigNumber }>;

    StrategyCancelled(
      strategyId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { strategyId: BigNumber }>;

    "StrategyCreated(address,address,tuple,uint256,uint256,uint256,uint256)"(
      investToken?: string | null,
      stableToken?: string | null,
      parameter?: null,
      timestamp?: null,
      investRoundId?: null,
      stableRoundId?: null,
      price?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          boolean,
          number,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          number,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          number
        ] & {
          _investToken: string;
          _investAmount: BigNumber;
          _stableToken: string;
          _stableAmount: BigNumber;
          _slippage: BigNumber;
          _floor: boolean;
          _floorType: number;
          _floorValue: BigNumber;
          _liquidateOnFloor: boolean;
          _cancelOnFloor: boolean;
          _buy: boolean;
          _buyType: number;
          _buyValue: BigNumber;
          _buyTwap: boolean;
          _buyTwapTime: BigNumber;
          _buyTwapTimeUnit: number;
          _btd: boolean;
          _btdValue: BigNumber;
          _btdType: number;
          _buyDCAUnit: number;
          _buyDCAValue: BigNumber;
          _sell: boolean;
          _sellType: number;
          _sellValue: BigNumber;
          _highSellValue: BigNumber;
          _str: boolean;
          _strValue: BigNumber;
          _strType: number;
          _sellDCAUnit: number;
          _sellDCAValue: BigNumber;
          _sellTwap: boolean;
          _sellTwapTime: BigNumber;
          _sellTwapTimeUnit: number;
          _completeOnSell: boolean;
          _current_price: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        investToken: string;
        stableToken: string;
        parameter: [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          boolean,
          number,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          number,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          number
        ] & {
          _investToken: string;
          _investAmount: BigNumber;
          _stableToken: string;
          _stableAmount: BigNumber;
          _slippage: BigNumber;
          _floor: boolean;
          _floorType: number;
          _floorValue: BigNumber;
          _liquidateOnFloor: boolean;
          _cancelOnFloor: boolean;
          _buy: boolean;
          _buyType: number;
          _buyValue: BigNumber;
          _buyTwap: boolean;
          _buyTwapTime: BigNumber;
          _buyTwapTimeUnit: number;
          _btd: boolean;
          _btdValue: BigNumber;
          _btdType: number;
          _buyDCAUnit: number;
          _buyDCAValue: BigNumber;
          _sell: boolean;
          _sellType: number;
          _sellValue: BigNumber;
          _highSellValue: BigNumber;
          _str: boolean;
          _strValue: BigNumber;
          _strType: number;
          _sellDCAUnit: number;
          _sellDCAValue: BigNumber;
          _sellTwap: boolean;
          _sellTwapTime: BigNumber;
          _sellTwapTimeUnit: number;
          _completeOnSell: boolean;
          _current_price: number;
        };
        timestamp: BigNumber;
        investRoundId: BigNumber;
        stableRoundId: BigNumber;
        price: BigNumber;
      }
    >;

    StrategyCreated(
      investToken?: string | null,
      stableToken?: string | null,
      parameter?: null,
      timestamp?: null,
      investRoundId?: null,
      stableRoundId?: null,
      price?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          boolean,
          number,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          number,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          number
        ] & {
          _investToken: string;
          _investAmount: BigNumber;
          _stableToken: string;
          _stableAmount: BigNumber;
          _slippage: BigNumber;
          _floor: boolean;
          _floorType: number;
          _floorValue: BigNumber;
          _liquidateOnFloor: boolean;
          _cancelOnFloor: boolean;
          _buy: boolean;
          _buyType: number;
          _buyValue: BigNumber;
          _buyTwap: boolean;
          _buyTwapTime: BigNumber;
          _buyTwapTimeUnit: number;
          _btd: boolean;
          _btdValue: BigNumber;
          _btdType: number;
          _buyDCAUnit: number;
          _buyDCAValue: BigNumber;
          _sell: boolean;
          _sellType: number;
          _sellValue: BigNumber;
          _highSellValue: BigNumber;
          _str: boolean;
          _strValue: BigNumber;
          _strType: number;
          _sellDCAUnit: number;
          _sellDCAValue: BigNumber;
          _sellTwap: boolean;
          _sellTwapTime: BigNumber;
          _sellTwapTimeUnit: number;
          _completeOnSell: boolean;
          _current_price: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        investToken: string;
        stableToken: string;
        parameter: [
          string,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          boolean,
          number,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          number,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          number,
          number,
          BigNumber,
          boolean,
          BigNumber,
          number,
          boolean,
          number
        ] & {
          _investToken: string;
          _investAmount: BigNumber;
          _stableToken: string;
          _stableAmount: BigNumber;
          _slippage: BigNumber;
          _floor: boolean;
          _floorType: number;
          _floorValue: BigNumber;
          _liquidateOnFloor: boolean;
          _cancelOnFloor: boolean;
          _buy: boolean;
          _buyType: number;
          _buyValue: BigNumber;
          _buyTwap: boolean;
          _buyTwapTime: BigNumber;
          _buyTwapTimeUnit: number;
          _btd: boolean;
          _btdValue: BigNumber;
          _btdType: number;
          _buyDCAUnit: number;
          _buyDCAValue: BigNumber;
          _sell: boolean;
          _sellType: number;
          _sellValue: BigNumber;
          _highSellValue: BigNumber;
          _str: boolean;
          _strValue: BigNumber;
          _strType: number;
          _sellDCAUnit: number;
          _sellDCAValue: BigNumber;
          _sellTwap: boolean;
          _sellTwapTime: BigNumber;
          _sellTwapTimeUnit: number;
          _completeOnSell: boolean;
          _current_price: number;
        };
        timestamp: BigNumber;
        investRoundId: BigNumber;
        stableRoundId: BigNumber;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    cancelStrategy(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createStrategy(
      _parameter: {
        _investToken: string;
        _investAmount: BigNumberish;
        _stableToken: string;
        _stableAmount: BigNumberish;
        _slippage: BigNumberish;
        _floor: boolean;
        _floorType: BigNumberish;
        _floorValue: BigNumberish;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: BigNumberish;
        _buyValue: BigNumberish;
        _buyTwap: boolean;
        _buyTwapTime: BigNumberish;
        _buyTwapTimeUnit: BigNumberish;
        _btd: boolean;
        _btdValue: BigNumberish;
        _btdType: BigNumberish;
        _buyDCAUnit: BigNumberish;
        _buyDCAValue: BigNumberish;
        _sell: boolean;
        _sellType: BigNumberish;
        _sellValue: BigNumberish;
        _highSellValue: BigNumberish;
        _str: boolean;
        _strValue: BigNumberish;
        _strType: BigNumberish;
        _sellDCAUnit: BigNumberish;
        _sellDCAValue: BigNumberish;
        _sellTwap: boolean;
        _sellTwapTime: BigNumberish;
        _sellTwapTimeUnit: BigNumberish;
        _completeOnSell: boolean;
        _current_price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStrategy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextStartegyId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelStrategy(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createStrategy(
      _parameter: {
        _investToken: string;
        _investAmount: BigNumberish;
        _stableToken: string;
        _stableAmount: BigNumberish;
        _slippage: BigNumberish;
        _floor: boolean;
        _floorType: BigNumberish;
        _floorValue: BigNumberish;
        _liquidateOnFloor: boolean;
        _cancelOnFloor: boolean;
        _buy: boolean;
        _buyType: BigNumberish;
        _buyValue: BigNumberish;
        _buyTwap: boolean;
        _buyTwapTime: BigNumberish;
        _buyTwapTimeUnit: BigNumberish;
        _btd: boolean;
        _btdValue: BigNumberish;
        _btdType: BigNumberish;
        _buyDCAUnit: BigNumberish;
        _buyDCAValue: BigNumberish;
        _sell: boolean;
        _sellType: BigNumberish;
        _sellValue: BigNumberish;
        _highSellValue: BigNumberish;
        _str: boolean;
        _strValue: BigNumberish;
        _strType: BigNumberish;
        _sellDCAUnit: BigNumberish;
        _sellDCAValue: BigNumberish;
        _sellTwap: boolean;
        _sellTwapTime: BigNumberish;
        _sellTwapTimeUnit: BigNumberish;
        _completeOnSell: boolean;
        _current_price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStrategy(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextStartegyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
