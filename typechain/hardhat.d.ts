/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Denominations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Denominations__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "AggregatorV2V3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV2V3Interface__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "FeedRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeedRegistryInterface__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "BuyFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BuyFacet__factory>;
    getContractFactory(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: "FloorFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FloorFacet__factory>;
    getContractFactory(
      name: "LensFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LensFacet__factory>;
    getContractFactory(
      name: "OwnershipFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnershipFacet__factory>;
    getContractFactory(
      name: "PriceOracleFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracleFacet__factory>;
    getContractFactory(
      name: "SellFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SellFacet__factory>;
    getContractFactory(
      name: "StrategyFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyFacet__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondLoupe__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC173",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC173__factory>;
    getContractFactory(
      name: "LibBytes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBytes__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "LibSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibSwap__factory>;
    getContractFactory(
      name: "LibTrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibTrade__factory>;
    getContractFactory(
      name: "ScenarioDEX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ScenarioDEX__factory>;
    getContractFactory(
      name: "ScenarioERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ScenarioERC20__factory>;
    getContractFactory(
      name: "ScenarioFeedAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ScenarioFeedAggregator__factory>;
    getContractFactory(
      name: "Test1Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test1Facet__factory>;
    getContractFactory(
      name: "Test2Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test2Facet__factory>;
    getContractFactory(
      name: "DiamondInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondInit__factory>;

    getContractAt(
      name: "Denominations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Denominations>;
    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "AggregatorV2V3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV2V3Interface>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "FeedRegistryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeedRegistryInterface>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Diamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "BuyFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BuyFacet>;
    getContractAt(
      name: "DiamondCutFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: "DiamondLoupeFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: "FloorFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FloorFacet>;
    getContractAt(
      name: "LensFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LensFacet>;
    getContractAt(
      name: "OwnershipFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnershipFacet>;
    getContractAt(
      name: "PriceOracleFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracleFacet>;
    getContractAt(
      name: "SellFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SellFacet>;
    getContractAt(
      name: "StrategyFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyFacet>;
    getContractAt(
      name: "IDiamondCut",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "IDiamondLoupe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondLoupe>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC173",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC173>;
    getContractAt(
      name: "LibBytes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBytes>;
    getContractAt(
      name: "LibDiamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "LibSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibSwap>;
    getContractAt(
      name: "LibTrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibTrade>;
    getContractAt(
      name: "ScenarioDEX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ScenarioDEX>;
    getContractAt(
      name: "ScenarioERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ScenarioERC20>;
    getContractAt(
      name: "ScenarioFeedAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ScenarioFeedAggregator>;
    getContractAt(
      name: "Test1Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test1Facet>;
    getContractAt(
      name: "Test2Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test2Facet>;
    getContractAt(
      name: "DiamondInit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondInit>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
