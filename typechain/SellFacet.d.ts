/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SellFacetInterface extends ethers.utils.Interface {
  functions: {
    "executeSTR(uint256,uint80,uint80,uint80,uint80,(address,bytes))": FunctionFragment;
    "executeSell(uint256,(address,bytes))": FunctionFragment;
    "executeSellTwap(uint256,(address,bytes))": FunctionFragment;
    "executionSellAmount(bool,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeSTR",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { dex: string; callData: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSell",
    values: [BigNumberish, { dex: string; callData: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSellTwap",
    values: [BigNumberish, { dex: string; callData: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "executionSellAmount",
    values: [boolean, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "executeSTR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSellTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionSellAmount",
    data: BytesLike
  ): Result;

  events: {
    "AssetSwapped(address,address,address,uint256,uint256,address)": EventFragment;
    "STRExecuted(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SellExecuted(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SellTwapExecuted(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "STRExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellTwapExecuted"): EventFragment;
}

export type AssetSwappedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string] & {
    dex: string;
    fromAsset: string;
    toAsset: string;
    fromAmount: BigNumber;
    receivedAmount: BigNumber;
    account: string;
  }
>;

export type STRExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    strategyId: BigNumber;
    price: BigNumber;
    slippage: BigNumber;
    stableTokenAmount: BigNumber;
    exchangeRate: BigNumber;
  }
>;

export type SellExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    strategyId: BigNumber;
    price: BigNumber;
    slippage: BigNumber;
    stableTokenAmount: BigNumber;
    exchangeRate: BigNumber;
  }
>;

export type SellTwapExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    strategyId: BigNumber;
    price: BigNumber;
    slippage: BigNumber;
    stableTokenAmount: BigNumber;
    exchangeRate: BigNumber;
    time: BigNumber;
  }
>;

export class SellFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SellFacetInterface;

  functions: {
    executeSTR(
      strategyId: BigNumberish,
      fromInvestRoundId: BigNumberish,
      fromStableRoundId: BigNumberish,
      toInvestRoundId: BigNumberish,
      toStableRoundId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSell(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSellTwap(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executionSellAmount(
      investValue: boolean,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  executeSTR(
    strategyId: BigNumberish,
    fromInvestRoundId: BigNumberish,
    fromStableRoundId: BigNumberish,
    toInvestRoundId: BigNumberish,
    toStableRoundId: BigNumberish,
    swap: { dex: string; callData: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSell(
    strategyId: BigNumberish,
    swap: { dex: string; callData: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSellTwap(
    strategyId: BigNumberish,
    swap: { dex: string; callData: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executionSellAmount(
    investValue: boolean,
    strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    executeSTR(
      strategyId: BigNumberish,
      fromInvestRoundId: BigNumberish,
      fromStableRoundId: BigNumberish,
      toInvestRoundId: BigNumberish,
      toStableRoundId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    executeSell(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    executeSellTwap(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    executionSellAmount(
      investValue: boolean,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssetSwapped(address,address,address,uint256,uint256,address)"(
      dex?: null,
      fromAsset?: null,
      toAsset?: null,
      fromAmount?: null,
      receivedAmount?: null,
      account?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        dex: string;
        fromAsset: string;
        toAsset: string;
        fromAmount: BigNumber;
        receivedAmount: BigNumber;
        account: string;
      }
    >;

    AssetSwapped(
      dex?: null,
      fromAsset?: null,
      toAsset?: null,
      fromAmount?: null,
      receivedAmount?: null,
      account?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        dex: string;
        fromAsset: string;
        toAsset: string;
        fromAmount: BigNumber;
        receivedAmount: BigNumber;
        account: string;
      }
    >;

    "STRExecuted(uint256,uint256,uint256,uint256,uint256)"(
      strategyId?: BigNumberish | null,
      price?: null,
      slippage?: null,
      stableTokenAmount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        strategyId: BigNumber;
        price: BigNumber;
        slippage: BigNumber;
        stableTokenAmount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    STRExecuted(
      strategyId?: BigNumberish | null,
      price?: null,
      slippage?: null,
      stableTokenAmount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        strategyId: BigNumber;
        price: BigNumber;
        slippage: BigNumber;
        stableTokenAmount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    "SellExecuted(uint256,uint256,uint256,uint256,uint256)"(
      strategyId?: BigNumberish | null,
      price?: null,
      slippage?: null,
      stableTokenAmount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        strategyId: BigNumber;
        price: BigNumber;
        slippage: BigNumber;
        stableTokenAmount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    SellExecuted(
      strategyId?: BigNumberish | null,
      price?: null,
      slippage?: null,
      stableTokenAmount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        strategyId: BigNumber;
        price: BigNumber;
        slippage: BigNumber;
        stableTokenAmount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    "SellTwapExecuted(uint256,uint256,uint256,uint256,uint256,uint256)"(
      strategyId?: BigNumberish | null,
      price?: null,
      slippage?: null,
      stableTokenAmount?: null,
      exchangeRate?: null,
      time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        strategyId: BigNumber;
        price: BigNumber;
        slippage: BigNumber;
        stableTokenAmount: BigNumber;
        exchangeRate: BigNumber;
        time: BigNumber;
      }
    >;

    SellTwapExecuted(
      strategyId?: BigNumberish | null,
      price?: null,
      slippage?: null,
      stableTokenAmount?: null,
      exchangeRate?: null,
      time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        strategyId: BigNumber;
        price: BigNumber;
        slippage: BigNumber;
        stableTokenAmount: BigNumber;
        exchangeRate: BigNumber;
        time: BigNumber;
      }
    >;
  };

  estimateGas: {
    executeSTR(
      strategyId: BigNumberish,
      fromInvestRoundId: BigNumberish,
      fromStableRoundId: BigNumberish,
      toInvestRoundId: BigNumberish,
      toStableRoundId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSell(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSellTwap(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executionSellAmount(
      investValue: boolean,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeSTR(
      strategyId: BigNumberish,
      fromInvestRoundId: BigNumberish,
      fromStableRoundId: BigNumberish,
      toInvestRoundId: BigNumberish,
      toStableRoundId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSell(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSellTwap(
      strategyId: BigNumberish,
      swap: { dex: string; callData: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executionSellAmount(
      investValue: boolean,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
