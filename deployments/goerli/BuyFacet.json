{
  "address": "0x39250cE1AFC3B4CCA42cdEdd372102B20E439345",
  "abi": [
    {
      "inputs": [],
      "name": "BTDNotSelected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BuyDCAIsSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BuyNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BuyTwapNotSelected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedTimeNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeedNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FloorGreaterThanPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HighImpact",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InvalidExchangeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumLossDetected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSwapFromZeroBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceDippedBelowFloorValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceIsGreaterThanBuyValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceNotInRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoundDataDoesNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyIsNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongPreviousIDs",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dex",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AssetSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "impact",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenSubstracted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TokensTransaction",
          "name": "tokens",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investPrice",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "investRoundId",
              "type": "uint80"
            },
            {
              "internalType": "uint80",
              "name": "stableRoundId",
              "type": "uint80"
            }
          ],
          "indexed": false,
          "internalType": "struct RoundIds",
          "name": "rounds",
          "type": "tuple"
        }
      ],
      "name": "BTDExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "impact",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenSubstracted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TokensTransaction",
          "name": "tokens",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablePriceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BuyExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "impact",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenSubstracted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "investAmount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TokensTransaction",
          "name": "tokens",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablePriceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BuyTwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investTokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableTokenPrice",
          "type": "uint256"
        }
      ],
      "name": "StrategyCompleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "fromInvestRoundId",
          "type": "uint80"
        },
        {
          "internalType": "uint80",
          "name": "fromStableRoundId",
          "type": "uint80"
        },
        {
          "internalType": "uint80",
          "name": "toInvestRoundId",
          "type": "uint80"
        },
        {
          "internalType": "uint80",
          "name": "toStableRoundId",
          "type": "uint80"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "name": "executeBTD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "name": "executeBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "name": "executeBuyTwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "stableAmount",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "executionBuyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf36a566a630c6705fd7b103aeba812a85c3bfb2a6ba4c3a1b9434af02994f5d4",
  "receipt": {
    "to": null,
    "from": "0x3960feD4d09b9a569B66654C6ba6846Db7dE6ba7",
    "contractAddress": "0x39250cE1AFC3B4CCA42cdEdd372102B20E439345",
    "transactionIndex": 10,
    "gasUsed": "2813861",
    "logsBloom": "0x
    "blockHash": "0x3eaf3baf4adb73a7610f10014164969b76d601b180bc2f90ba07e85409c27464",
    "transactionHash": "0xf36a566a630c6705fd7b103aeba812a85c3bfb2a6ba4c3a1b9434af02994f5d4",
    "logs": [],
    "blockNumber": 10184788,
    "cumulativeGasUsed": "5597537",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 15,
  "solcInputHash": "8758efc6836d60167b6d86981cbcb7fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BTDNotSelected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyDCAIsSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyTwapNotSelected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedTimeNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeedNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FloorGreaterThanPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HighImpact\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InvalidExchangeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumLossDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapFromZeroBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceDippedBelowFloorValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIsGreaterThanBuyValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundDataDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPreviousIDs\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AssetSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"impact\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenSubstracted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TokensTransaction\",\"name\":\"tokens\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"investRoundId\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"stableRoundId\",\"type\":\"uint80\"}],\"indexed\":false,\"internalType\":\"struct RoundIds\",\"name\":\"rounds\",\"type\":\"tuple\"}],\"name\":\"BTDExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"impact\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenSubstracted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TokensTransaction\",\"name\":\"tokens\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablePriceInUSD\",\"type\":\"uint256\"}],\"name\":\"BuyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"impact\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenSubstracted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TokensTransaction\",\"name\":\"tokens\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablePriceInUSD\",\"type\":\"uint256\"}],\"name\":\"BuyTwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investTokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableTokenPrice\",\"type\":\"uint256\"}],\"name\":\"StrategyCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"fromInvestRoundId\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"fromStableRoundId\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"toInvestRoundId\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"toStableRoundId\",\"type\":\"uint80\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"executeBTD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"executeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"executeBuyTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stableAmount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"executionBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"BuyFacet specializes in verifying conditions related to limit price buys and Dollar-Cost Averaging (DCA) buys,      ensuring that the necessary criteria are met before executing a buy action.\",\"events\":{\"AssetSwapped(address,address,address,uint256,uint256,address)\":{\"params\":{\"account\":\"The address of the user account that initiated the swap.\",\"dex\":\"The address of the contract or dex used for the swap.\",\"fromAmount\":\"The amount of 'fromAsset' that was swapped.\",\"fromAsset\":\"The address of the asset swapped from.\",\"receivedAmount\":\"The amount of 'toAsset' received in the swap.\",\"toAsset\":\"The address of the asset received in the swap.\"}},\"BTDExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,(uint80,uint80))\":{\"params\":{\"impact\":\"The allowable price impact percentage for the buy action.\",\"investPrice\":\"the average price at which invest tokens were bought.\",\"rounds\":\"the round Ids of invest and stable tokens.\",\"strategyId\":\"The unique ID of the strategy where the BTD action was executed.\",\"tokens\":\"tokens substracted and added into the users wallet\"}},\"BuyExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)\":{\"params\":{\"impact\":\"The allowable price impact percentage for the buy action.\",\"investPrice\":\"the average price at which invest tokens were bought.\",\"stablePriceInUSD\":\"price of stable token in USD\",\"strategyId\":\"The unique ID of the strategy where the buy action was executed.\",\"tokens\":\"tokens substracted and added into the users wallet\"}},\"BuyTwapExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)\":{\"params\":{\"impact\":\"The allowable price impact percentage for the buy action.\",\"investPrice\":\"the average price at which invest tokens were bought.\",\"stablePriceInUSD\":\"price of stable token in USD\",\"strategyId\":\"The unique ID of the strategy where the Buy on TWAP action was executed.\",\"tokens\":\"tokens substracted and added into the users wallet\"}},\"StrategyCompleted(uint256,uint256,uint256)\":{\"params\":{\"investTokenPrice\":\"The price of the invest token in USD.\",\"stableTokenPrice\":\"The price of the stable token in USD.\",\"strategyId\":\"The unique ID of the completed strategy.\"}}},\"kind\":\"dev\",\"methods\":{\"executeBTD(uint256,uint80,uint80,uint80,uint80,(address,bytes))\":{\"params\":{\"fromInvestRoundId\":\"The starting invest round ID for monitoring price fluctuations.\",\"fromStableRoundId\":\"The starting stable round ID for monitoring price fluctuations.\",\"strategyId\":\"The unique ID of the trading strategy where the BTD action is executed.\",\"swap\":\"The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.\",\"toInvestRoundId\":\"The ending invest round ID for monitoring price fluctuations.\",\"toStableRoundId\":\"The ending stable round ID for monitoring price fluctuations.\"}},\"executeBuy(uint256,(address,bytes))\":{\"details\":\"The function validates strategy parameters, executes the buy action, and updates the strategy state.\",\"params\":{\"strategyId\":\"The unique ID of the strategy for which the buy action is executed.\",\"swap\":\"The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.\"}},\"executeBuyTwap(uint256,(address,bytes))\":{\"params\":{\"strategyId\":\"The unique ID of the strategy to execute the Buy on TWAP action.\",\"swap\":\"The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.\"}},\"executionBuyAmount(bool,uint256)\":{\"params\":{\"stableAmount\":\"Boolean flag indicating whether to consider the entire stable token amount.\",\"strategyId\":\"The unique ID of the strategy for which to calculate the buy value.\"},\"returns\":{\"_0\":\"The calculated buy value based on the specified parameters.\"}}},\"title\":\"BuyFacet\",\"version\":1},\"userdoc\":{\"events\":{\"AssetSwapped(address,address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when an asset swap has been executed successfully.\"},\"BTDExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,(uint80,uint80))\":{\"notice\":\"Emitted when a Buy The Dip (BTD) action is executed for a trading strategy using a specific DEX, call data, buy value, and execution time.\"},\"BuyExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)\":{\"notice\":\"Emitted when a buy action is executed for a trading strategy.\"},\"BuyTwapExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)\":{\"notice\":\"Emitted when a Buy on Time-Weighted Average Price (TWAP) action is executed for a trading strategy using a specific DEX, call data, buy value, and execution time.\"},\"StrategyCompleted(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a trade execution strategy is completed.\"}},\"kind\":\"user\",\"methods\":{\"executeBTD(uint256,uint80,uint80,uint80,uint80,(address,bytes))\":{\"notice\":\"Executes a Buy-The-Dip (BTD) trading strategy action within a specified price range. This function allows the strategy to buy the invest token when its price decreases to a certain target value, following a specified DIP strategy type.\"},\"executeBuy(uint256,(address,bytes))\":{\"notice\":\"Executes a buy action for a trading strategy based on specified conditions.\"},\"executeBuyTwap(uint256,(address,bytes))\":{\"notice\":\"Executes a Buy on Time-Weighted Average Price (TWAP) action for a trading strategy.\"},\"executionBuyAmount(bool,uint256)\":{\"notice\":\"Calculate the effective value for a buy action in a trading strategy.\"}},\"notice\":\"This facet contains functions responsible for evaluating conditions necessary for executing buy actions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/BuyFacet.sol\":\"BuyFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum ReentrancyStatus {\\n    NOT_ENTERED,\\n    ENTERED\\n}\\n\\n/**\\n * @notice The `Status` enum represents the possible statuses of a trading strategy.\\n * @dev This enum defines three status options that describe the state of a strategy:\\n *      - ACTIVE: The strategy is currently active and operational.\\n *      - CANCELLED: The strategy has been cancelled and is no longer in effect.\\n *      - COMPLETED: The strategy has been successfully completed.\\n */\\nenum Status {\\n    ACTIVE, // The strategy is currently active.\\n    CANCELLED, // The strategy has been cancelled.\\n    COMPLETED // The strategy has been successfully completed.\\n}\\n\\n/**\\n * @notice The `FloorLegType` enum defines the types of floor price legs for trading strategies.\\n * @dev This enum enumerates three possible types of floor price legs that can be associated with a strategy:\\n *      - NO_TYPE: No specific floor price leg is defined.\\n *      - LIMIT_PRICE: The floor price is set as a specific limit price.\\n *      - DECREASE_BY: The floor price is determined by decreasing the current price by a certain amount.\\n */\\nenum FloorLegType {\\n    NO_TYPE, // No specific floor price leg is defined.\\n    LIMIT_PRICE, // The floor price is set as a specific limit price.\\n    DECREASE_BY // The floor price is determined by decreasing the current price by a certain amount.\\n}\\n/**\\n * @notice The `BuyLegType` enum defines the types of buy legs for trading strategies.\\n * @dev This enum enumerates two possible types of buy legs that can be associated with a strategy:\\n *      - NO_TYPE: No specific buy leg is defined.\\n *      - LIMIT_PRICE: The buy leg is set as a specific limit price.\\n */\\nenum BuyLegType {\\n    NO_TYPE, // No specific buy leg is defined.\\n    LIMIT_PRICE // The buy leg is set as a specific limit price.\\n}\\n\\n/**\\n * @notice The `SellLegType` enum defines the types of sell legs for trading strategies.\\n * @dev This enum enumerates three possible types of sell legs that can be associated with a strategy:\\n *      - NO_TYPE: No specific sell leg is defined.\\n *      - LIMIT_PRICE: The sell leg is set as a specific limit price.\\n *      - INCREASE_BY: The sell leg is determined by increasing the current price by a certain amount.\\n */\\nenum SellLegType {\\n    NO_TYPE, // No specific sell leg is defined.\\n    LIMIT_PRICE, // The sell leg is set as a specific limit price.\\n    INCREASE_BY // The sell leg is determined by increasing the current price by a certain amount.\\n}\\n\\n/**\\n * @notice The `DIP_SPIKE` enum defines the types of dip and spike conditions for trading strategies.\\n * @dev This enum enumerates five possible types of dip and spike conditions that can be associated with a strategy:\\n *      - NO_SPIKE: No specific dip or spike condition is defined.\\n *      - DECREASE_BY: The condition is based on a decrease in price by a certain percentage.\\n *      - INCREASE_BY: The condition is based on an increase in price by a certain percentage.\\n *      - FIXED_INCREASE: The condition is based on a fixed increase in price.\\n *      - FIXED_DECREASE: The condition is based on a fixed decrease in price.\\n */\\nenum DIP_SPIKE {\\n    NO_SPIKE, // No specific dip or spike condition is defined.\\n    DECREASE_BY, // The condition is based on a decrease in price by a certain percentage.\\n    INCREASE_BY, // The condition is based on an increase in price by a certain percentage.\\n    FIXED_INCREASE, // The condition is based on a fixed increase in price.\\n    FIXED_DECREASE // The condition is based on a fixed decrease in price.\\n}\\n\\n/**\\n * @notice The `DCA_UNIT` enum defines the units for Dollar-Cost Averaging (DCA) in trading strategies.\\n * @dev This enum enumerates three possible units for DCA that can be associated with a strategy:\\n *      - NO_UNIT: No specific DCA unit is defined.\\n *      - PERCENTAGE: DCA is specified as a percentage of assets.\\n *      - FIXED: DCA is specified as a fixed amount.\\n */\\nenum DCA_UNIT {\\n    NO_UNIT, // No specific DCA unit is defined.\\n    PERCENTAGE, // DCA is specified as a percentage of assets.\\n    FIXED // DCA is specified as a fixed amount.\\n}\\n\\n/**\\n * @notice The `TimeUnit` enum defines the units of time for time-related settings in trading strategies.\\n * @dev This enum enumerates three possible time units that can be used in trading strategies:\\n *      - NO_UNIT: No specific time unit is defined.\\n *      - HOURS: Time is measured in hours.\\n *      - DAYS: Time is measured in days.\\n */\\nenum TimeUnit {\\n    NO_UNIT, // No specific time unit is defined.\\n    HOURS, // Time is measured in hours.\\n    DAYS // Time is measured in days.\\n}\\n\\n/**\\n * @notice The `StrategyParameters` struct defines the parameters that configure a trading strategy.\\n * @dev These parameters dictate the behavior of the strategy, including trading details, conditions, and actions.\\n */\\n\\nstruct StrategyParameters {\\n    // @param _investToken The address of the investment token.\\n    address _investToken;\\n    // @param _investAmount The amount of investment token to be used.\\n    uint256 _investAmount;\\n    // @param _stableToken The address of the stable token.\\n    address _stableToken;\\n    // @param _stableAmount The amount of stable token to be used.\\n    uint256 _stableAmount;\\n    // @param _impact The impact tolerance for the strategy.\\n    uint256 _impact;\\n    // @param _floorType The type of floor price (if floor is set).\\n    FloorLegType _floorType;\\n    // @param _floorValue The value of the floor price (if floor is set).\\n    uint256 _floorValue;\\n    // @param _liquidateOnFloor A flag to trigger liquidation when the floor price is reached (if floor is set)..\\n    bool _liquidateOnFloor;\\n    // @param _cancelOnFloor A flag to cancel the strategy when the floor price is reached (if floor is set).\\n    bool _cancelOnFloor;\\n    // @param _minimumLoss The minimum loss required for floor percentage to satisfy.\\n    uint256 _minimumLoss;\\n    // @param _buyType The type of buy action (if buy is set).\\n    BuyLegType _buyType;\\n    // @param _buyValue The value of the buy action (if buy is set).\\n    uint256 _buyValue;\\n    // @param _buyTwapTime The time interval for TWAP buying (if buy is set).\\n    uint256 _buyTwapTime;\\n    // @param _buyTwapTimeUnit The unit of time for TWAP buying .\\n    TimeUnit _buyTwapTimeUnit;\\n    // @param _btdValue The value for buying the dip (if buy is set).\\n    uint256 _btdValue;\\n    // @param _btdType The type of buy the dip action (if buy is set).\\n    DIP_SPIKE _btdType;\\n    // @param _buyDCAUnit The unit for buy DCA (Dollar-Cost Averaging) for stable amount (if buy is set).\\n    DCA_UNIT _buyDCAUnit;\\n    // @param _buyDCAValue The value for buy DCA.\\n    uint256 _buyDCAValue;\\n    // @param _sellType The type of sell action (if sell is set).\\n    SellLegType _sellType;\\n    // @param _sellValue The value of the sell action (if sell is set).\\n    uint256 _sellValue;\\n    // @param if sell DCA is selected, _highSellValue is used to trigger complete sell when the high sell value is reached (if sell is set).\\n    uint256 _highSellValue;\\n    // @param _minimumProfit The minimum profit to be generated during sell if sell profit percentage is set\\n    uint256 _minimumProfit;\\n    // @param _strValue The value of the str if it is set to true (if sell is set).\\n    uint256 _strValue;\\n    // @param _strType The type of str.\\n    DIP_SPIKE _strType;\\n    // @param _sellDCAUnit The unit for sell DCA (Dollar-Cost Averaging) for the invest amount (if sell is set).\\n    DCA_UNIT _sellDCAUnit;\\n    // @param _sellDCAValue The value for sell DCA.\\n    uint256 _sellDCAValue;\\n    // @param _sellTwapTime The time interval for TWAP selling (if sell is set).\\n    uint256 _sellTwapTime;\\n    //  @param _sellTwapTimeUnit The unit of time for TWAP selling (if sell is set).\\n    TimeUnit _sellTwapTimeUnit;\\n    // @param _completeOnSell A flag to complete the strategy on selling (if sell is set).\\n    bool _completeOnSell;\\n    // @param _current_price_sell The current price indicator is selected for sell\\n    bool _current_price_sell;\\n    // @param _current_price The current price indicator is selected for buy\\n    bool _current_price_buy;\\n}\\n\\n/**\\n * @notice The `Strategy` struct defines the characteristics and status of a trading strategy.\\n * @dev This struct encapsulates important data related to a trading strategy, including user ownership,\\n *      strategy parameters, execution times, financial metrics, and its current status.\\n * it is mostly used for internal computation\\n */\\n\\nstruct Strategy {\\n    //  @param user The address of the strategy owner.\\n    address user;\\n    // @param parameters The parameters that configure the behavior of the strategy\\n    // as passed by the user and defined above\\n    StrategyParameters parameters;\\n    // to store invest amount to be sold when dca is chosen for percentage.\\n    uint256 sellPercentageAmount;\\n    // to store stable amount to be given when dca is chosen for percentage.\\n    uint256 buyPercentageAmount;\\n    // the invest amount based on which sellPercentageAmount is calculated\\n    uint256 sellPercentageTotalAmount;\\n    // the stable amount based on which buyPercentageAmount is calculated\\n    uint256 buyPercentageTotalAmount;\\n    //  @param sellTwapExecutedAt The timestamp of the last executed TWAP (Time-Weighted Average Price) sell.\\n    //  if sell twap is set for the sell. Otherwise it remains 0\\n    uint256 sellTwapExecutedAt;\\n    //  @param buyTwapExecutedAt The timestamp of the last executed TWAP buy.\\n    //  if buy Twap is set for btd. Otherwise it remains 0.\\n    uint256 buyTwapExecutedAt;\\n    // @param invest roundId The Chainlink VRF (Verifiable Random Function) round ID.\\n    uint80 investRoundIdForBTD;\\n    // @param stable roundId The Chainlink VRF (Verifiable Random Function) round ID.\\n    uint80 stableRoundIdForBTD;\\n    // @param invest roundId The Chainlink VRF (Verifiable Random Function) round ID.\\n    uint80 investRoundIdForSTR;\\n    // @param stable roundId The Chainlink VRF (Verifiable Random Function) round ID.\\n    uint80 stableRoundIdForSTR;\\n    // @param investPrice The price at which investment is made.\\n    //While creating strategy it is set to the current price\\n    uint256 investPrice;\\n    //  @param profit The current profit generated by the strategy.\\n    uint256 profit;\\n    //  @param budget The available budget for the strategy.\\n    // it is set at the starting of the strategy\\n    uint256 budget;\\n    // @param status The current status of the strategy.\\n    Status status;\\n}\\n/**\\n * @notice AppStorage is the central storage structure for this contract, holding essential data.\\n * @dev This struct contains critical information used by the contract for operation.\\n * It stores data such as function selectors, supported interfaces, the contract owner, strategy details,\\n * Chainlink feed information, and more.\\n */\\n\\nstruct AppStorage {\\n    // maps function selectors to the facets that execute the functions.\\n    // and maps the selectors to their position in the selectorSlots array.\\n    // func selector => address facet, selector position\\n    mapping(bytes4 => bytes32) facets;\\n    // array of slots of function selectors.\\n    // each slot holds 8 function selectors.\\n    mapping(uint256 => bytes32) selectorSlots;\\n    // The number of function selectors in selectorSlots\\n    uint16 selectorCount;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address owner;\\n    // next id to use for strategies\\n    uint256 nextStrategyId;\\n    // array of strategies\\n    mapping(uint256 => Strategy) strategies;\\n    // chainlink feeds - asset => USD feed\\n    mapping(address => address) feeds;\\n    // account => nonce\\n    mapping(address => uint256) nonces;\\n    // reentrancy status\\n    ReentrancyStatus reentrancyStatus;\\n}\\n\\n/**\\n * @title Swap\\n * @dev A struct representing a swap or trade operation on a decentralized exchange (DEX).\\n *  @param dex: The address of the DEX where the swap is to be executed.\\n *  @param callData: Encoded data containing instructions for the swap on the specified DEX.\\n */\\nstruct Swap {\\n    address dex;\\n    bytes callData;\\n}\\n\\n// Struct representing the parameters to update in a strategy\\nstruct UpdateStruct {\\n    uint256 sellValue;\\n    uint256 buyValue;\\n    uint256 strValue;\\n    uint256 btdValue;\\n    uint256 floorValue;\\n    uint256 highSellValue;\\n    uint256 buyTwapTime;\\n    TimeUnit buyTwapTimeUnit;\\n    uint256 buyDCAValue;\\n    uint256 sellDCAValue;\\n    uint256 sellTwapTime;\\n    TimeUnit sellTwapTimeUnit;\\n    bool toggleCompleteOnSell;\\n    bool toggleLiquidateOnFloor;\\n    bool toggleCancelOnFloor;\\n    uint256 impact;\\n    bool current_price_sell;\\n    bool current_price_buy;\\n    uint256 minimumLoss;\\n    uint256 minimumProfit;\\n}\\n\\n// struct for information regarding which token is added in the strategy and which deleted\\nstruct TokensTransaction {\\n    uint256 tokenSubstracted;\\n    uint256 tokenAdded;\\n    uint256 stableAmount;\\n    uint256 investAmount;\\n}\\n\",\"keccak256\":\"0xf557abb3f6c701b60fa16b8cc47e9108b9db4e10438030933b4f0340282b0ee3\",\"license\":\"MIT\"},\"contracts/facets/BuyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { AppStorage, Strategy, Status, DCA_UNIT, DIP_SPIKE, SellLegType, BuyLegType, FloorLegType, Swap, TokensTransaction } from \\\"../AppStorage.sol\\\";\\nimport { LibSwap } from \\\"../libraries/LibSwap.sol\\\";\\nimport { InvalidExchangeRate, NoSwapFromZeroBalance, FloorGreaterThanPrice, WrongPreviousIDs, RoundDataDoesNotMatch, StrategyIsNotActive, BuyNotSet, BuyTwapNotSelected, PriceNotInRange } from \\\"../utils/GenericErrors.sol\\\";\\nimport { Modifiers } from \\\"../utils/Modifiers.sol\\\";\\nimport { LibPrice } from \\\"../libraries/LibPrice.sol\\\";\\nimport { LibTime } from \\\"../libraries/LibTime.sol\\\";\\nimport { LibTrade } from \\\"../libraries/LibTrade.sol\\\";\\n\\nerror BuyDCAIsSet();\\nerror ExpectedTimeNotElapsed();\\nerror BTDNotSelected();\\nerror PriceIsGreaterThanBuyValue();\\nerror PriceDippedBelowFloorValue();\\nerror MinimumLossDetected();\\n\\n/**\\n * @title TransferObject\\n * @notice This struct represents an object used for transferring information related to a swap operation.\\n * @dev The TransferObject struct is designed to encapsulate essential information related to a swap, facilitating the transfer of tokens.\\n *\\n * Struct Fields:\\n * @param value: the quantity or value associated with the transfer.\\n * @param dexSwap: A Swap enum indicating the type of decentralized exchange used for the swap operation.\\n * @param price: the price of the invest token with respect to the stable token.\\n * @param buyValue: the value associated with a buy operation within the strategy object.\\n */\\n\\nstruct TransferObject {\\n    uint256 value;\\n    Swap dexSwap;\\n    uint256 price;\\n    uint256 buyValue;\\n}\\n\\n/**\\n * @title RoundIds\\n * @notice This struct stores round Id for the transaction of invest and stable tokens.\\n * Struct Fields:\\n * @param investRoundId: the round Id of the invest token.\\n * @param stableRoundId: the round Id of the stable token\\n */\\nstruct RoundIds {\\n    uint80 investRoundId;\\n    uint80 stableRoundId;\\n}\\n\\n/**\\n * @title BuyFacet\\n * @notice This facet contains functions responsible for evaluating conditions necessary for executing buy actions.\\n * @dev BuyFacet specializes in verifying conditions related to limit price buys and Dollar-Cost Averaging (DCA) buys,\\n *      ensuring that the necessary criteria are met before executing a buy action.\\n */\\n\\ncontract BuyFacet is Modifiers {\\n    /**\\n     * @notice The `AppStorage` state variable serves as the central data repository for this contract. Please\\n     * please look at AppStorage.sol for more detail\\n     */\\n    AppStorage internal s;\\n\\n    /**\\n     * @notice Emitted when a buy action is executed for a trading strategy.\\n     * @param strategyId The unique ID of the strategy where the buy action was executed.\\n     * @param impact The allowable price impact percentage for the buy action.\\n     * @param tokens tokens substracted and added into the users wallet\\n     * @param investPrice the average price at which invest tokens were bought.\\n     *@param stablePriceInUSD price of stable token in USD\\n     */\\n\\n    event BuyExecuted(\\n        uint256 indexed strategyId,\\n        uint256 impact,\\n        TokensTransaction tokens,\\n        uint256 investPrice,\\n        uint256 stablePriceInUSD\\n    );\\n\\n    /**\\n     * @notice Emitted when a Buy on Time-Weighted Average Price (TWAP) action is executed for a trading strategy using a specific DEX, call data, buy value, and execution time.\\n     * @param strategyId The unique ID of the strategy where the Buy on TWAP action was executed.\\n     * @param impact The allowable price impact percentage for the buy action.\\n     * @param tokens tokens substracted and added into the users wallet\\n     * @param investPrice the average price at which invest tokens were bought.\\n     *@param stablePriceInUSD price of stable token in USD\\n     */\\n    event BuyTwapExecuted(\\n        uint256 indexed strategyId,\\n        uint256 impact,\\n        TokensTransaction tokens,\\n        uint256 investPrice,\\n        uint256 stablePriceInUSD\\n    );\\n    /**\\n     * @notice Emitted when a Buy The Dip (BTD) action is executed for a trading strategy using a specific DEX, call data, buy value, and execution time.\\n     * @param strategyId The unique ID of the strategy where the BTD action was executed.\\n     * @param impact The allowable price impact percentage for the buy action.\\n     * @param tokens tokens substracted and added into the users wallet\\n     * @param investPrice the average price at which invest tokens were bought.\\n     * @param rounds the round Ids of invest and stable tokens.\\n     */\\n    event BTDExecuted(\\n        uint256 indexed strategyId,\\n        uint256 impact,\\n        TokensTransaction tokens,\\n        uint256 investPrice,\\n        RoundIds rounds\\n    );\\n\\n    /**\\n     * @notice Emitted when a trade execution strategy is completed.\\n     * @param strategyId The unique ID of the completed strategy.\\n     * @param investTokenPrice The price of the invest token in USD.\\n     * @param stableTokenPrice The price of the stable token in USD.\\n     */\\n    event StrategyCompleted(uint256 indexed strategyId, uint256 investTokenPrice, uint256 stableTokenPrice);\\n\\n    /**\\n     * @notice Executes a buy action for a trading strategy based on specified conditions.\\n     * @dev The function validates strategy parameters, executes the buy action, and updates the strategy state.\\n     * @param strategyId The unique ID of the strategy for which the buy action is executed.\\n     * @param swap The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.\\n     */\\n    function executeBuy(uint256 strategyId, Swap calldata swap) external nonReentrant {\\n        Strategy storage strategy = s.strategies[strategyId];\\n\\n        if (strategy.status != Status.ACTIVE) {\\n            revert StrategyIsNotActive();\\n        }\\n\\n        if (strategy.parameters._buyValue == 0) {\\n            revert BuyNotSet();\\n        }\\n        if (strategy.parameters._btdValue > 0 || strategy.parameters._buyTwapTime > 0) {\\n            revert BuyDCAIsSet();\\n        }\\n        if (strategy.parameters._stableAmount == 0) {\\n            revert NoSwapFromZeroBalance();\\n        }\\n        (uint256 price, , ) = LibPrice.getPrice(strategy.parameters._investToken, strategy.parameters._stableToken);\\n\\n        uint256 value = executionBuyAmount(true, strategyId);\\n\\n        transferBuy(strategyId, TransferObject(value, swap, price, strategy.parameters._buyValue), strategy);\\n\\n        if (strategy.parameters._sellValue == 0 && strategy.parameters._floorValue == 0) {\\n            strategy.status = Status.COMPLETED;\\n            uint256 investPrice = LibPrice.getUSDPrice(strategy.parameters._investToken);\\n            uint256 stablePrice = LibPrice.getUSDPrice(strategy.parameters._stableToken);\\n            emit StrategyCompleted(strategyId, investPrice, stablePrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a Buy on Time-Weighted Average Price (TWAP) action for a trading strategy.\\n     * @param strategyId The unique ID of the strategy to execute the Buy on TWAP action.\\n     * @param swap The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.\\n     */\\n    function executeBuyTwap(uint256 strategyId, Swap calldata swap) external nonReentrant {\\n        Strategy storage strategy = s.strategies[strategyId];\\n\\n        if (strategy.status != Status.ACTIVE) {\\n            revert StrategyIsNotActive();\\n        }\\n\\n        if (strategy.parameters._buyTwapTime == 0) {\\n            revert BuyTwapNotSelected();\\n        }\\n        if (strategy.parameters._stableAmount == 0) {\\n            revert NoSwapFromZeroBalance();\\n        }\\n\\n        (uint256 price, , ) = LibPrice.getPrice(strategy.parameters._investToken, strategy.parameters._stableToken);\\n\\n        uint256 timeToExecute = LibTime.convertToSeconds(\\n            strategy.parameters._buyTwapTime,\\n            strategy.parameters._buyTwapTimeUnit\\n        );\\n\\n        bool execute = LibTime.getTimeDifference(block.timestamp, strategy.buyTwapExecutedAt, timeToExecute);\\n\\n        if (!execute) {\\n            revert ExpectedTimeNotElapsed();\\n        }\\n\\n        uint256 value = executionBuyAmount(false, strategyId);\\n\\n        transferBuy(strategyId, TransferObject(value, swap, price, strategy.parameters._buyValue), strategy);\\n        strategy.buyTwapExecutedAt = block.timestamp;\\n        if (\\n            strategy.parameters._sellValue == 0 &&\\n            strategy.parameters._floorValue == 0 &&\\n            strategy.parameters._stableAmount == 0\\n        ) {\\n            strategy.status = Status.COMPLETED;\\n            uint256 investPrice = LibPrice.getUSDPrice(strategy.parameters._investToken);\\n            uint256 stablePrice = LibPrice.getUSDPrice(strategy.parameters._stableToken);\\n            emit StrategyCompleted(strategyId, investPrice, stablePrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a Buy-The-Dip (BTD) trading strategy action within a specified price range.\\n     * This function allows the strategy to buy the invest token when its price decreases to a certain target value, following a specified DIP strategy type.\\n     * @param strategyId The unique ID of the trading strategy where the BTD action is executed.\\n     * @param fromInvestRoundId The starting invest round ID for monitoring price fluctuations.\\n     * @param toInvestRoundId The ending invest round ID for monitoring price fluctuations.\\n     * @param fromStableRoundId The starting stable round ID for monitoring price fluctuations.\\n     * @param toStableRoundId The ending stable round ID for monitoring price fluctuations.\\n     * @param swap The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.\\n     */\\n\\n    function executeBTD(\\n        uint256 strategyId,\\n        uint80 fromInvestRoundId,\\n        uint80 fromStableRoundId,\\n        uint80 toInvestRoundId,\\n        uint80 toStableRoundId,\\n        Swap calldata swap\\n    ) external nonReentrant {\\n        Strategy storage strategy = s.strategies[strategyId];\\n        if (strategy.status != Status.ACTIVE) {\\n            revert StrategyIsNotActive();\\n        }\\n\\n        if (strategy.parameters._btdValue == 0) {\\n            revert BTDNotSelected();\\n        }\\n        if (strategy.parameters._stableAmount == 0) {\\n            revert NoSwapFromZeroBalance();\\n        }\\n\\n        (uint256 price, uint80 investRoundId, uint80 stableRoundId) = LibPrice.getPrice(\\n            strategy.parameters._investToken,\\n            strategy.parameters._stableToken\\n        );\\n\\n        checkRoundPrices(strategyId, price, fromInvestRoundId, fromStableRoundId, toInvestRoundId, toStableRoundId);\\n\\n        strategy.investRoundIdForBTD = investRoundId;\\n        strategy.stableRoundIdForBTD = stableRoundId;\\n\\n        uint256 value = executionBuyAmount(false, strategyId);\\n\\n        transferBuy(strategyId, TransferObject(value, swap, price, strategy.parameters._buyValue), strategy);\\n        if (\\n            strategy.parameters._sellValue == 0 &&\\n            strategy.parameters._floorValue == 0 &&\\n            strategy.parameters._stableAmount == 0\\n        ) {\\n            strategy.status = Status.COMPLETED;\\n            uint256 investPrice = LibPrice.getUSDPrice(strategy.parameters._investToken);\\n            uint256 stablePrice = LibPrice.getUSDPrice(strategy.parameters._stableToken);\\n            emit StrategyCompleted(strategyId, investPrice, stablePrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the effective value for a buy action in a trading strategy.\\n     * @param stableAmount Boolean flag indicating whether to consider the entire stable token amount.\\n     * @param strategyId The unique ID of the strategy for which to calculate the buy value.\\n     * @return The calculated buy value based on the specified parameters.\\n     */\\n    function executionBuyAmount(bool stableAmount, uint256 strategyId) public view returns (uint256) {\\n        uint256 amount;\\n        Strategy memory strategy = s.strategies[strategyId];\\n        if (stableAmount) {\\n            amount = strategy.parameters._stableAmount;\\n        } else if (strategy.parameters._buyDCAUnit == DCA_UNIT.FIXED) {\\n            amount = (strategy.parameters._stableAmount > strategy.parameters._buyDCAValue)\\n                ? strategy.parameters._buyDCAValue\\n                : strategy.parameters._stableAmount;\\n        } else if (strategy.parameters._buyDCAUnit == DCA_UNIT.PERCENTAGE) {\\n            amount = (strategy.parameters._stableAmount > strategy.buyPercentageAmount)\\n                ? strategy.buyPercentageAmount\\n                : strategy.parameters._stableAmount;\\n        }\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Internal function to execute a \\\"Buy\\\" action within a specified price range.\\n     * @dev This function transfers assets from stable tokens to investment tokens on a DEX.\\n     * @param strategyId The unique ID of the trading strategy where the BTD action is executed.\\n     * @param transferObject The TransferBuy struct containing the parameters for executing the buy action.\\n     * @param strategy The Strategy struct containing the parameters for the trading strategy.\\n     */\\n    function transferBuy(uint256 strategyId, TransferObject memory transferObject, Strategy storage strategy) internal {\\n        if (transferObject.price > transferObject.buyValue) {\\n            revert PriceIsGreaterThanBuyValue();\\n        }\\n\\n        LibSwap.SwapData memory swap = LibSwap.SwapData(\\n            transferObject.dexSwap.dex,\\n            strategy.parameters._stableToken,\\n            strategy.parameters._investToken,\\n            transferObject.value,\\n            transferObject.dexSwap.callData,\\n            strategy.user\\n        );\\n\\n        uint256 toTokenAmount = LibSwap.swap(swap);\\n\\n        uint256 rate = LibTrade.calculateExchangeRate(\\n            strategy.parameters._investToken,\\n            toTokenAmount,\\n            transferObject.value\\n        );\\n\\n        if (rate > transferObject.buyValue) {\\n            revert InvalidExchangeRate(transferObject.buyValue, rate);\\n        }\\n\\n        if (strategy.parameters._floorValue > 0) {\\n            if (strategy.parameters._floorType == FloorLegType.LIMIT_PRICE && strategy.parameters._floorValue >= rate) {\\n                revert FloorGreaterThanPrice();\\n            } else if (strategy.parameters._floorType == FloorLegType.DECREASE_BY) {\\n                uint256 currentInvestmentValue = (strategy.parameters._investAmount * transferObject.price) /\\n                    10 ** IERC20Metadata(strategy.parameters._investToken).decimals();\\n                uint256 totalInvested = (strategy.parameters._investAmount * strategy.investPrice) /\\n                    10 ** IERC20Metadata(strategy.parameters._investToken).decimals();\\n\\n                if (totalInvested > currentInvestmentValue) {\\n                    //how much loss in %\\n                    uint256 lossPercentage = ((totalInvested - currentInvestmentValue) * LibTrade.MAX_PERCENTAGE) /\\n                        totalInvested;\\n                    if (lossPercentage >= strategy.parameters._floorValue) {\\n                        if (\\n                            strategy.parameters._minimumLoss > 0 &&\\n                            totalInvested - currentInvestmentValue >= strategy.parameters._minimumLoss\\n                        ) {\\n                            revert MinimumLossDetected();\\n                        } else {\\n                            revert PriceDippedBelowFloorValue();\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        strategy.parameters._stableAmount -= transferObject.value;\\n        uint256 previousValue = strategy.parameters._investAmount * strategy.investPrice;\\n        strategy.parameters._investAmount = strategy.parameters._investAmount + toTokenAmount;\\n\\n        strategy.investPrice =\\n            (previousValue + (toTokenAmount * transferObject.price)) /\\n            strategy.parameters._investAmount;\\n\\n        uint256 impact = LibTrade.validateImpact(rate, transferObject.price, strategy.parameters._impact, true);\\n        uint256 stablePrice = LibPrice.getUSDPrice(strategy.parameters._stableToken);\\n\\n        if (strategy.parameters._sellDCAUnit == DCA_UNIT.PERCENTAGE) {\\n            strategy.sellPercentageAmount =\\n                (strategy.parameters._sellDCAValue * strategy.parameters._investAmount) /\\n                LibTrade.MAX_PERCENTAGE;\\n            strategy.sellPercentageTotalAmount = strategy.parameters._investAmount;\\n        }\\n\\n        if (\\n            strategy.parameters._buyValue > 0 &&\\n            strategy.parameters._btdValue == 0 &&\\n            strategy.parameters._buyTwapTime == 0\\n        ) {\\n            emit BuyExecuted(\\n                strategyId,\\n                impact,\\n                TokensTransaction({\\n                    tokenSubstracted: transferObject.value,\\n                    tokenAdded: toTokenAmount,\\n                    stableAmount: strategy.parameters._stableAmount,\\n                    investAmount: strategy.parameters._investAmount\\n                }),\\n                strategy.investPrice,\\n                stablePrice\\n            );\\n        } else if (strategy.parameters._btdValue > 0) {\\n            emit BTDExecuted(\\n                strategyId,\\n                impact,\\n                TokensTransaction({\\n                    tokenSubstracted: transferObject.value,\\n                    tokenAdded: toTokenAmount,\\n                    stableAmount: strategy.parameters._stableAmount,\\n                    investAmount: strategy.parameters._investAmount\\n                }),\\n                strategy.investPrice,\\n                RoundIds({ investRoundId: strategy.investRoundIdForBTD, stableRoundId: strategy.stableRoundIdForBTD })\\n            );\\n        } else if (strategy.parameters._buyTwapTime > 0) {\\n            emit BuyTwapExecuted(\\n                strategyId,\\n                impact,\\n                TokensTransaction({\\n                    tokenSubstracted: transferObject.value,\\n                    tokenAdded: toTokenAmount,\\n                    stableAmount: strategy.parameters._stableAmount,\\n                    investAmount: strategy.parameters._investAmount\\n                }),\\n                strategy.investPrice,\\n                stablePrice\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to check if there is a data mismatch between price rounds for a strategy.\\n     * @dev This function ensures that the price fluctuations between specified rounds adhere to strategy parameters.\\n     * @param strategyId The unique ID of the trading strategy where the BTD action is executed.\\n     * @param fromInvestRoundId The round ID for the investment token's price data to start checking from.\\n     * @param fromStableRoundId The round ID for the stable token's price data to start checking from.\\n     * @param toInvestRoundId The round ID for the investment token's price data to check up to.\\n     * @param toStableRoundId The round ID for the stable token's price data to check up to.\\n     */\\n    function checkRoundPrices(\\n        uint256 strategyId,\\n        uint256 price,\\n        uint80 fromInvestRoundId,\\n        uint80 fromStableRoundId,\\n        uint80 toInvestRoundId,\\n        uint80 toStableRoundId\\n    ) internal view {\\n        Strategy memory strategy = s.strategies[strategyId];\\n\\n        if (toInvestRoundId < fromInvestRoundId || toStableRoundId < fromStableRoundId) {\\n            revert WrongPreviousIDs();\\n        }\\n\\n        if (\\n            strategy.investRoundIdForBTD > fromInvestRoundId ||\\n            strategy.investRoundIdForBTD > toInvestRoundId ||\\n            strategy.stableRoundIdForBTD > fromStableRoundId ||\\n            strategy.stableRoundIdForBTD > toStableRoundId\\n        ) {\\n            revert WrongPreviousIDs();\\n        }\\n\\n        uint256 fromPrice = LibPrice.getRoundData(\\n            fromInvestRoundId,\\n            fromStableRoundId,\\n            strategy.parameters._investToken,\\n            strategy.parameters._stableToken\\n        );\\n        uint256 toPrice = LibPrice.getRoundData(\\n            toInvestRoundId,\\n            toStableRoundId,\\n            strategy.parameters._investToken,\\n            strategy.parameters._stableToken\\n        );\\n\\n        if (\\n            (strategy.parameters._btdType == DIP_SPIKE.FIXED_INCREASE ||\\n                strategy.parameters._btdType == DIP_SPIKE.INCREASE_BY)\\n        ) {\\n            if (price < toPrice) {\\n                revert PriceNotInRange();\\n            }\\n        }\\n        if (\\n            (strategy.parameters._btdType == DIP_SPIKE.FIXED_DECREASE ||\\n                strategy.parameters._btdType == DIP_SPIKE.DECREASE_BY)\\n        ) {\\n            if (price > toPrice) {\\n                revert PriceNotInRange();\\n            }\\n        }\\n\\n        uint256 btdValue = strategy.parameters._btdValue;\\n        uint256 fromToPriceDifference;\\n        uint256 toFromPriceDifference;\\n\\n        if (\\n            (strategy.parameters._btdType == DIP_SPIKE.FIXED_INCREASE ||\\n                strategy.parameters._btdType == DIP_SPIKE.INCREASE_BY)\\n        ) {\\n            if (toPrice < fromPrice) {\\n                revert RoundDataDoesNotMatch();\\n            } else {\\n                toFromPriceDifference = toPrice - fromPrice;\\n            }\\n        }\\n        if (\\n            (strategy.parameters._btdType == DIP_SPIKE.FIXED_DECREASE ||\\n                strategy.parameters._btdType == DIP_SPIKE.DECREASE_BY)\\n        ) {\\n            if (toPrice > fromPrice) {\\n                revert RoundDataDoesNotMatch();\\n            } else {\\n                fromToPriceDifference = fromPrice - toPrice;\\n            }\\n        }\\n\\n        if ((strategy.parameters._btdType == DIP_SPIKE.FIXED_INCREASE) && (btdValue > toFromPriceDifference)) {\\n            revert RoundDataDoesNotMatch();\\n        } else if ((strategy.parameters._btdType == DIP_SPIKE.FIXED_DECREASE) && (btdValue > fromToPriceDifference)) {\\n            revert RoundDataDoesNotMatch();\\n        } else if (\\n            (strategy.parameters._btdType == DIP_SPIKE.INCREASE_BY) &&\\n            (btdValue > ((toFromPriceDifference * 10000) / fromPrice))\\n        ) {\\n            revert RoundDataDoesNotMatch();\\n        } else if (\\n            (strategy.parameters._btdType == DIP_SPIKE.DECREASE_BY) &&\\n            (btdValue > ((fromToPriceDifference * 10000) / fromPrice))\\n        ) {\\n            revert RoundDataDoesNotMatch();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x095f05c540cedc398137c53bf644777ca999e8043879716ec19180d943b7ed8d\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x882028bbad965788430b37558ea12b191a31b4d6e562c08ac2357fa6e0bc9de5\",\"license\":\"MIT\"},\"contracts/libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TransferFailed } from \\\"../utils/GenericErrors.sol\\\";\\n\\n/**\\n * @title LibAsset\\n * @dev This library provides functions for interacting with ERC20 assets.\\n */\\nlibrary LibAsset {\\n    uint256 private constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n     * @notice Approves a specified amount of an asset for a spender if the current allowance is insufficient.\\n     * @param asset The address of the asset.\\n     * @param spender The address of the spender.\\n     * @param amount The amount to approve.\\n     */\\n    function maxApprove(address asset, address spender, uint256 amount) internal {\\n        if (IERC20(asset).allowance(address(this), spender) < amount) {\\n            SafeERC20.safeApprove(IERC20(asset), spender, 0);\\n            SafeERC20.safeApprove(IERC20(asset), spender, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers a specified amount of an asset from one address to another.\\n     * @param asset The address of the asset.\\n     * @param from The sender's address.\\n     * @param to The recipient's address.\\n     * @param amount The amount to transfer.\\n     */\\n    function transferFrom(address asset, address from, address to, uint256 amount) internal {\\n        uint256 prevBalance = IERC20(asset).balanceOf(to);\\n        SafeERC20.safeTransferFrom(IERC20(asset), from, to, amount);\\n        if (IERC20(asset).balanceOf(to) - prevBalance != amount) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers a specified amount of an asset to a recipient.\\n     * @param asset The address of the asset.\\n     * @param to The recipient's address.\\n     * @param amount The amount to transfer.\\n     */\\n    function transfer(address asset, address to, uint256 amount) internal {\\n        uint256 prevBalance = IERC20(asset).balanceOf(to);\\n        SafeERC20.safeTransfer(IERC20(asset), to, amount);\\n        if (IERC20(asset).balanceOf(to) - prevBalance != amount) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the balance of a specified asset for a given account.\\n     * @param asset The address of the asset.\\n     * @param account The account for which to check the balance.\\n     * @return The balance of the asset for the specified account.\\n     */\\n    function balanceOf(address asset, address account) internal view returns (uint256) {\\n        return IERC20(asset).balanceOf(account);\\n    }\\n}\\n\",\"keccak256\":\"0xabaf52a5d90146866c805817efee408b56be4cf4c1dd529fd3634d2bf4abed0e\",\"license\":\"MIT\"},\"contracts/libraries/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary LibBytes {\\n    // solhint-disable no-inline-assembly\\n\\n    // LibBytes specific errors\\n    error SliceOverflow();\\n    error SliceOutOfBounds();\\n    error AddressOutOfBounds();\\n\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    // -------------------------\\n    /**\\n     * @notice Slice a portion of a bytes array.\\n     * @param _bytes The input bytes array.\\n     * @param _start The starting index of the slice.\\n     * @param _length The length of the slice.\\n     * @return tempBytes A new bytes array containing the sliced data.\\n     */\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        if (_length + 31 < _length) revert SliceOverflow();\\n        if (_bytes.length < _start + _length) revert SliceOutOfBounds();\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    /**\\n     * @notice Convert a portion of a bytes array to an address.\\n     * @param _bytes The input bytes array.\\n     * @param _start The starting index of the address data.\\n     * @return tempAddress The address extracted from the bytes array.\\n     */\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        if (_bytes.length < _start + 20) {\\n            revert AddressOutOfBounds();\\n        }\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    /// Copied from OpenZeppelin's `Strings.sol` utility library.\\n    /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8335676b0e99944eef6a742e16dcd9ff6e68e609/contracts/utils/Strings.sol\\n    /**\\n     * @notice Convert a uint256 to its hexadecimal representation as a string.\\n     * @param value The uint256 value to convert.\\n     * @param length The desired length of the hexadecimal string.\\n     * @return A string containing the hexadecimal representation of the uint256 value.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xbd7edc3743a6a3ca135ec7077a7e2f29c45719980c324eed18c084e15293a503\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { AppStorage } from \\\"../AppStorage.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    function diamondStorage() internal pure returns (AppStorage storage s) {\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        AppStorage storage s = diamondStorage();\\n        address previousOwner = s.owner;\\n        s.owner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        AppStorage storage s = diamondStorage();\\n        uint256 originalSelectorCount = s.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = s.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            s.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            s.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        AppStorage storage s = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = s.facets[selector];\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    \\\"LibDiamondCut: Can't add function that already exists\\\"\\n                );\\n                // add facet for selector\\n                s.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot =\\n                    (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    s.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = s.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(\\n                    oldFacetAddress != _newFacetAddress,\\n                    \\\"LibDiamondCut: Can't replace function with same function\\\"\\n                );\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                s.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = s.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = s.facets[selector];\\n                    require(\\n                        address(bytes20(oldFacet)) != address(0),\\n                        \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n                    );\\n                    // only useful if immutable functions exist\\n                    require(\\n                        address(bytes20(oldFacet)) != address(this),\\n                        \\\"LibDiamondCut: Can't remove immutable function\\\"\\n                    );\\n                    // replace selector with last selector in s.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        s.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(s.facets[lastSelector]);\\n                    }\\n                    delete s.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = s.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    s.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete s.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xcaa7ed67af8cf7fe50033f6d06c56cab2bd3392aceceb782660e07153c2c06db\",\"license\":\"MIT\"},\"contracts/libraries/LibPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport { LibDiamond } from \\\"./LibDiamond.sol\\\";\\nimport { InvalidPrice, FeedNotFound } from \\\"../utils/GenericErrors.sol\\\";\\nimport { AppStorage } from \\\"../AppStorage.sol\\\";\\n\\n/**\\n * @title LibPrice\\n * @dev This library provides functions for fetching and manipulating asset prices.\\n */\\nlibrary LibPrice {\\n    address constant USD_QUOTE = 0x0000000000000000000000000000000000000348;\\n\\n    /**\\n     * @notice Get the current price and round IDs of an asset relative to a unit.\\n     * @param asset The address of the asset.\\n     * @param unit The address of the unit (e.g., USD).\\n     * @return price The current price of the asset in terms of the unit.\\n     * @return investRoundId The round ID of the asset's price feed.\\n     * @return stableRoundId The round ID of the unit's price feed.\\n     */\\n    function getPrice(address asset, address unit) internal view returns (uint256 price, uint80, uint80) {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n\\n        if (s.feeds[asset] == address(0) || s.feeds[unit] == address(0)) {\\n            revert FeedNotFound();\\n        }\\n\\n        (uint80 investRoundId, int256 assetPrice, , , ) = AggregatorV2V3Interface(s.feeds[asset]).latestRoundData();\\n        (uint80 stableRoundId, int256 unitPrice, , , ) = AggregatorV2V3Interface(s.feeds[unit]).latestRoundData();\\n\\n        if (assetPrice == 0 || unitPrice == 0) {\\n            revert InvalidPrice();\\n        }\\n\\n        uint256 unitDecimals = IERC20Metadata(unit).decimals();\\n        price = (uint256(assetPrice) * (10 ** unitDecimals)) / uint256(unitPrice);\\n\\n        return (price, investRoundId, stableRoundId);\\n    }\\n\\n    /**\\n     * @notice Get the historical price of an asset relative to a unit at specific round IDs.\\n     * @param investRoundId The round ID of the asset's price feed.\\n     * @param stableRoundId The round ID of the unit's price feed.\\n     * @param asset The address of the asset.\\n     * @param unit The address of the unit (e.g., USD).\\n     * @return price The price of the asset in terms of the unit at the specified round IDs.\\n     */\\n    function getRoundData(\\n        uint80 investRoundId,\\n        uint80 stableRoundId,\\n        address asset,\\n        address unit\\n    ) internal view returns (uint256) {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n\\n        if (s.feeds[asset] == address(0) || s.feeds[unit] == address(0)) {\\n            revert FeedNotFound();\\n        }\\n\\n        (, int256 assetPrice, , , ) = AggregatorV2V3Interface(s.feeds[asset]).getRoundData(investRoundId);\\n        (, int256 unitPrice, , , ) = AggregatorV2V3Interface(s.feeds[unit]).getRoundData(stableRoundId);\\n\\n        if (assetPrice == 0 || unitPrice == 0) {\\n            revert InvalidPrice();\\n        }\\n\\n        uint256 unitDecimals = IERC20Metadata(unit).decimals();\\n        uint256 price = (uint256(assetPrice) * (10 ** unitDecimals)) / uint256(unitPrice);\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Get the price of an asset in USD.\\n     * @param asset The address of the asset.\\n     * @return price The price of the asset in USD\\n     */\\n    function getUSDPrice(address asset) internal view returns (uint256) {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n\\n        if (s.feeds[asset] == address(0)) {\\n            revert FeedNotFound();\\n        }\\n        (, int256 assetPrice, , , ) = AggregatorV2V3Interface(s.feeds[asset]).latestRoundData();\\n        if (assetPrice == 0) {\\n            revert InvalidPrice();\\n        }\\n        return uint256(assetPrice);\\n    }\\n\\n    /**\\n     * @notice Get the price of an asset in USD.\\n     * @param asset The address of the asset.\\n     * @param roundId the round for which price is required.\\n     * @return price The price of the asset based on round Id\\n     */\\n    function getPriceBasedOnRoundId(address asset, uint80 roundId) internal view returns (uint256) {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n\\n        if (s.feeds[asset] == address(0)) {\\n            revert FeedNotFound();\\n        }\\n        (, int256 assetPrice, , , ) = AggregatorV2V3Interface(s.feeds[asset]).getRoundData(roundId);\\n        if (assetPrice == 0) {\\n            revert InvalidPrice();\\n        }\\n        return uint256(assetPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x2c7062db476d53eb08f7fa8b10a3cbf54424e04b770890df025b62f7a91a95e2\",\"license\":\"MIT\"},\"contracts/libraries/LibSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\nimport { LibUtil } from \\\"./LibUtil.sol\\\";\\nimport { NoSwapFromZeroBalance, InsufficientBalance, SwapFailed } from \\\"../utils/GenericErrors.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LibSwap\\n * @dev This library provides functions for executing asset swaps.\\n */\\nlibrary LibSwap {\\n    struct SwapData {\\n        address callTo; // The address of the contract or dex to execute the swap on.\\n        address fromAsset; // The address of the asset to swap from.\\n        address toAsset; // The address of the asset to receive.\\n        uint256 fromAmount; // The amount of the 'fromAsset' to swap.\\n        bytes callData; // The call data for the swap.\\n        address user; // The user initiating the swap.\\n    }\\n\\n    /**\\n     * @notice Emitted when an asset swap has been executed successfully.\\n     * @param dex The address of the contract or dex used for the swap.\\n     * @param fromAsset The address of the asset swapped from.\\n     * @param toAsset The address of the asset received in the swap.\\n     * @param fromAmount The amount of 'fromAsset' that was swapped.\\n     * @param receivedAmount The amount of 'toAsset' received in the swap.\\n     * @param account The address of the user account that initiated the swap.\\n     */\\n\\n    event AssetSwapped(\\n        address dex,\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAmount,\\n        uint256 receivedAmount,\\n        address account\\n    );\\n\\n    /**\\n     * @notice Execute an asset swap from one asset to another using the provided swap data.\\n     * @param _swap The swap data containing all necessary information for the swap.\\n     * @return The amount of 'toAsset' received in the swap.\\n     * @dev This function transfers 'fromAsset' from the user to this contract, executes the swap,\\n     * and transfers the received 'toAsset' back to the user.\\n     */\\n    function swap(SwapData memory _swap) internal returns (uint256) {\\n        uint256 fromAmount = _swap.fromAmount;\\n        if (fromAmount == 0) revert NoSwapFromZeroBalance();\\n\\n        LibAsset.transferFrom(_swap.fromAsset, _swap.user, address(this), fromAmount);\\n\\n        uint256 initialReceivingAssetBalance = LibAsset.balanceOf(_swap.toAsset, address(this));\\n\\n        LibAsset.maxApprove(_swap.fromAsset, _swap.callTo, _swap.fromAmount);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory res) = _swap.callTo.call(_swap.callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert(reason);\\n        }\\n\\n        uint256 newBalance = LibAsset.balanceOf(_swap.toAsset, address(this));\\n        uint256 receivedAmount = newBalance - initialReceivingAssetBalance;\\n\\n        if (receivedAmount == 0) {\\n            revert SwapFailed();\\n        }\\n\\n        LibAsset.transfer(_swap.toAsset, _swap.user, receivedAmount);\\n\\n        emit AssetSwapped(_swap.callTo, _swap.fromAsset, _swap.toAsset, _swap.fromAmount, receivedAmount, _swap.user);\\n\\n        return receivedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x97d0b9ff55ff5eb11fd67677ccde90384ff4c072b1ef79cffd65c8029a03b598\",\"license\":\"MIT\"},\"contracts/libraries/LibTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { TimeUnit } from \\\"../AppStorage.sol\\\";\\n\\nerror InvalidUnit();\\n\\n/**\\n * @title LibTime\\n * @dev This library provides functions for time-related calculations.\\n */\\nlibrary LibTime {\\n    /**\\n     * @notice Convert a given time value to seconds based on the specified time unit.\\n     * @param time The time value to convert.\\n     * @param unit The time unit (e.g., TimeUnit.HOURS, TimeUnit.DAYS).\\n     * @return The time value converted to seconds.\\n     * @dev Reverts with `InvalidUnit` error if an unsupported time unit is provided.\\n     */\\n    function convertToSeconds(uint256 time, TimeUnit unit) internal pure returns (uint256) {\\n        if (unit == TimeUnit.HOURS) {\\n            return time * 3600;\\n        } else if (unit == TimeUnit.DAYS) {\\n            return time * 86400;\\n        } else {\\n            revert InvalidUnit();\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if a time difference condition is met.\\n     * @param presentTime The current time.\\n     * @param executionTime The execution time to consider (0 for immediate execution).\\n     * @param targetTime The target time for comparison.\\n     * @return A boolean indicating whether the time difference condition is met.\\n     */\\n\\n    function getTimeDifference(\\n        uint256 presentTime,\\n        uint256 executionTime,\\n        uint256 targetTime\\n    ) internal pure returns (bool) {\\n        if (executionTime == 0) {\\n            return true;\\n        }\\n        bool timeDifference = targetTime <= presentTime - executionTime ? true : false;\\n        return timeDifference;\\n    }\\n}\\n\",\"keccak256\":\"0x9cc3be57e1b3ec593e0008b82036cd72e275fd3a76eec2c67edff07b408b09bd\",\"license\":\"MIT\"},\"contracts/libraries/LibTrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { HighImpact } from \\\"../utils/GenericErrors.sol\\\";\\n\\n/**\\n * @title LibTrade\\n * @dev This library provides functions for calculating exchange rates and validating slippage.\\n */\\nlibrary LibTrade {\\n    uint256 public constant MAX_PERCENTAGE = 10000;\\n\\n    /**\\n    @dev Calculate exchange rate given input and output amounts\\n    @param fromAsset Address of the asset that was used to swap\\n    @param fromAmount Amount of the asset that was used to swap\\n    @param toAmount Amount of the asset that was received from swap\\n    @return uint256 Returns the exchange rate in toAsset unit\\n     */\\n    function calculateExchangeRate(\\n        address fromAsset,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    ) internal view returns (uint256) {\\n        IERC20Metadata _fromToken = IERC20Metadata(fromAsset);\\n        uint256 fromDecimals = _fromToken.decimals();\\n        return ((toAmount * (10 ** fromDecimals)) / fromAmount);\\n    }\\n\\n    /**\\n     * @notice Validate the Impact of a swap.\\n     * @param exchangeRate The calculated exchange rate for the swap.\\n     * @param price The reference price for the swap.\\n     * @param maxImpact The maximum allowed Impact percentage.\\n     * @param isBuy A flag indicating if it's a buy operation (true) or not (false).\\n     * @return uint256 Returns the calculated Impact percentage.\\n     */\\n    function validateImpact(\\n        uint256 exchangeRate,\\n        uint256 price,\\n        uint256 maxImpact,\\n        bool isBuy\\n    ) internal pure returns (uint256) {\\n        uint256 impact = (price * MAX_PERCENTAGE) / exchangeRate;\\n\\n        if (isBuy && impact < MAX_PERCENTAGE && MAX_PERCENTAGE - impact > maxImpact) revert HighImpact();\\n        if (!isBuy && impact > MAX_PERCENTAGE && impact - MAX_PERCENTAGE > maxImpact) revert HighImpact();\\n        uint256 impactValue;\\n        if (isBuy && impact < MAX_PERCENTAGE) {\\n            impactValue = MAX_PERCENTAGE - impact;\\n        } else if (!isBuy && impact > MAX_PERCENTAGE) {\\n            impactValue = impact - MAX_PERCENTAGE;\\n        }\\n        return impactValue;\\n    }\\n}\\n\",\"keccak256\":\"0x96c2b97099929cfb81b5e161e3c0718952c6aea1a09573617c0dca820485b6a0\",\"license\":\"MIT\"},\"contracts/libraries/LibUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibBytes.sol\\\";\\n\\n/**\\n * @title LibUtil\\n * @dev This library provides utility functions for working with revert messages.\\n */\\nlibrary LibUtil {\\n    using LibBytes for bytes;\\n\\n    /**\\n     * @notice Get a revert message from transaction result data.\\n     * @param _res The transaction result data to extract the revert message from.\\n     * @return string The revert message or a \\\"Transaction reverted silently\\\" message if none is found.\\n     */\\n    function getRevertMsg(bytes memory _res) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\n    }\\n\\n    /**\\n     * @notice Used the get the ID of the current chain.\\n     * @return id The chain ID\\n     */\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x2ad03d87c101071a5a415a5dce0efaa23a1d9b1ea0d56fc2746094d89598e061\",\"license\":\"MIT\"},\"contracts/utils/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nerror NoSwapFromZeroBalance();\\nerror InsufficientBalance(uint256 required, uint256 balance);\\nerror SwapFailed();\\nerror TransferFailed();\\nerror InvalidExchangeRate(uint256 required, uint256 actual);\\nerror InvalidPrice();\\nerror InvalidImpact();\\nerror HighImpact();\\nerror InvalidInvestToken();\\nerror InvalidStableToken();\\nerror TokensMustDiffer();\\nerror AtLeastOneOptionRequired();\\nerror InvalidInvestAmount();\\nerror FloorValueZero();\\nerror InvalidSellType();\\nerror InvalidSellValue();\\nerror BuyAndSellAtMisorder();\\nerror InvalidStableAmount();\\nerror InvalidBuyType();\\nerror InvalidBuyValue();\\nerror InvalidFloorValue();\\nerror InvalidFloorType();\\nerror InvalidSellTypeDCA();\\nerror FloorValueGreaterThanBuyValue();\\nerror FloorValueGreaterThanSellValue();\\nerror BothBuyTwapAndBTD();\\nerror BuyDCAWithoutBuy();\\nerror BuyTwapTimeInvalid();\\nerror BuyTwapTimeUnitNotSelected();\\nerror BothSellTwapAndSTR();\\nerror SellDCAWithoutSell();\\nerror SellTwapTimeUnitNotSelected();\\nerror SellTwapTimeInvalid();\\nerror SellTwapOrStrWithoutSellDCAUnit();\\nerror SellDCAUnitWithoutSellDCAValue();\\nerror StrWithoutStrType();\\nerror BTDWithoutBTDType();\\nerror BuyDCAWithoutBuyDCAUnit();\\nerror BuyDCAUnitWithoutBuyDCAValue();\\nerror InvalidHighSellValue();\\nerror SellDCAValueRangeIsNotValid();\\nerror DCAValueShouldBeLessThanIntitialAmount();\\nerror BuyDCAValueRangeIsNotValid();\\nerror OrphandStrategy();\\nerror BuyNeverExecute();\\nerror FloorGreaterThanPrice();\\nerror FeedNotFound();\\nerror WrongPreviousIDs();\\nerror RoundDataDoesNotMatch();\\nerror StrategyIsNotActive();\\nerror InvalidNonce();\\nerror InvalidSigner();\\nerror AlreadyCancelled();\\nerror BuyNotSet();\\nerror SellNotSelected();\\nerror PercentageNotInRange();\\nerror BuyTwapNotSelected();\\nerror SellTwapNotSelected();\\nerror FloorNotSet();\\nerror ReentrancyGuardReentrantCall();\\nerror PriceNotInRange();\\n\",\"keccak256\":\"0x5e7f9fa92bca7030dbb9bbba701fbf12850c0e8ac401b0490f408d0358da57b3\",\"license\":\"MIT\"},\"contracts/utils/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { AppStorage, FloorLegType, BuyLegType, SellLegType, TimeUnit, DIP_SPIKE, DCA_UNIT, ReentrancyStatus } from \\\"../AppStorage.sol\\\";\\nimport { ReentrancyGuardReentrantCall } from \\\"./GenericErrors.sol\\\";\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\n\\nabstract contract Modifiers {\\n    /// @notice 100% = 100000 -> 2 decimals\\n\\n    modifier onlyOwner() {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n        require(msg.sender == s.owner, \\\"Modifiers: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n        // On the first call to nonReentrant, s.reentrancyStatus will be ReentrancyStatus.NOT_ENTERED\\n        if (s.reentrancyStatus == ReentrancyStatus.ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        s.reentrancyStatus = ReentrancyStatus.ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        s.reentrancyStatus = ReentrancyStatus.NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        AppStorage storage s = LibDiamond.diamondStorage();\\n        return s.reentrancyStatus == ReentrancyStatus.ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x6bd19234ff15be724c86ba376048f6e577d7908cda343f5efdb37d22ad6f3216\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131e9806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ef343ba146100515780633219d4ba146100665780636a4df2541461008b57806381f989771461009e575b600080fd5b61006461005f366004612b85565b6100b1565b005b610079610074366004612bdd565b61029a565b60405190815260200160405180910390f35b610064610099366004612b85565b610752565b6100646100ac366004612c1e565b610968565b6100b9610b55565b600082815260066020526040812090602582015460ff1660028111156100e1576100e1612cae565b146100ff5760405163432aa98d60e11b815260040160405180910390fd5b600b8101546000036101245760405163c5d53c0b60e01b815260040160405180910390fd5b600e8101541515806101395750600c81015415155b1561015757604051633bd7ca8d60e11b815260040160405180910390fd5b600481015460000361017c5760405163391b81e760e21b815260040160405180910390fd5b6001810154600382015460009161019f916001600160a01b039182169116610ba9565b5050905060006101b060018661029a565b90506101eb856040518060800160405280848152602001876101d190612d5c565b815260208101869052600b87015460409091015285610de7565b60128301541580156101ff57506007830154155b1561028b5760258301805460ff19166002179055600183015460009061022d906001600160a01b03166113c4565b600385015490915060009061024a906001600160a01b03166113c4565b604080518481526020810183905291925088917f37c8380b2284767eac942c610487f999ad4aa72b275e8af54bf32e4de2fc7d74910160405180910390a250505b5050506102966114ab565b5050565b600081815260066020818152604080842081516102008101835281546001600160a01b03908116825283516103e0810185526001840180548316825260028086015483890152600386015490931695820195909552600484015460608201526005840154608082015295830154879687969395938601939092909160a084019160ff9091169081111561032f5761032f612cae565b600281111561034057610340612cae565b815260068201546020820152600782015460ff8082161515604084015261010090910481161515606083015260088301546080830152600983015460a09092019116600181111561039357610393612cae565b60018111156103a4576103a4612cae565b8152600a8201546020820152600b8201546040820152600c82015460609091019060ff1660028111156103d9576103d9612cae565b60028111156103ea576103ea612cae565b8152600d8201546020820152600e82015460409091019060ff16600481111561041557610415612cae565b600481111561042657610426612cae565b8152602001600e820160019054906101000a900460ff16600281111561044e5761044e612cae565b600281111561045f5761045f612cae565b8152600f8201546020820152601082015460409091019060ff16600281111561048a5761048a612cae565b600281111561049b5761049b612cae565b815260118201546020820152601282015460408201526013820154606082015260148201546080820152601582015460a09091019060ff1660048111156104e4576104e4612cae565b60048111156104f5576104f5612cae565b81526020016015820160019054906101000a900460ff16600281111561051d5761051d612cae565b600281111561052e5761052e612cae565b81526016820154602082015260178201546040820152601882015460609091019060ff16600281111561056357610563612cae565b600281111561057457610574612cae565b81526018919091015461010080820460ff908116151560208086019190915262010000840482161515604080870191909152630100000090940482161515606095860152948652601a87015486860152601b87015492860192909252601c86015492850192909252601d8501546080850152601e85015460a0850152601f85015460c0850152918401546001600160501b0380821660e0860152600160501b8204811692850192909252600160a01b900481166101208401526021840154166101408301526022830154610160830152602383015461018083015260248301546101a083015260258301546101c09092019116600281111561067857610678612cae565b600281111561068957610689612cae565b905250905084156106a4578060200151606001519150610748565b60028160200151610200015160028111156106c1576106c1612cae565b036106fc576020810151610220810151606090910151116106ea578060200151606001516106f5565b806020015161022001515b9150610748565b600181602001516102000151600281111561071957610719612cae565b036107485780606001518160200151606001511161073f57806020015160600151610745565b80606001515b91505b5090505b92915050565b61075a610b55565b600082815260066020526040812090602582015460ff16600281111561078257610782612cae565b146107a05760405163432aa98d60e11b815260040160405180910390fd5b600c8101546000036107c55760405163634c458f60e11b815260040160405180910390fd5b60048101546000036107ea5760405163391b81e760e21b815260040160405180910390fd5b6001810154600382015460009161080d916001600160a01b039182169116610ba9565b5050600c830154600d84015491925060009161082c919060ff166114c0565b9050600061083f4285601f01548461152d565b90508061085f57604051633de1e42960e21b815260040160405180910390fd5b600061086c60008861029a565b90506108a78760405180608001604052808481526020018961088d90612d5c565b815260208101889052600b89015460409091015287610de7565b42601f86015560128501541580156108c157506007850154155b80156108cf57506004850154155b1561095b5760258501805460ff1916600217905560018501546000906108fd906001600160a01b03166113c4565b600387015490915060009061091a906001600160a01b03166113c4565b60408051848152602081018390529192508a917f37c8380b2284767eac942c610487f999ad4aa72b275e8af54bf32e4de2fc7d74910160405180910390a250505b50505050506102966114ab565b610970610b55565b600086815260066020526040812090602582015460ff16600281111561099857610998612cae565b146109b65760405163432aa98d60e11b815260040160405180910390fd5b600e8101546000036109db57604051637149a30f60e11b815260040160405180910390fd5b6004810154600003610a005760405163391b81e760e21b815260040160405180910390fd5b6001810154600382015460009182918291610a27916001600160a01b039182169116610ba9565b925092509250610a3b8a848b8b8b8b611565565b6020840180546001600160501b03838116600160501b026001600160a01b0319909216908516171790556000610a71818c61029a565b9050610a928b60405180608001604052808481526020018961088d90612d5c565b6012850154158015610aa657506007850154155b8015610ab457506004850154155b15610b405760258501805460ff191660021790556001850154600090610ae2906001600160a01b03166113c4565b6003870154909150600090610aff906001600160a01b03166113c4565b60408051848152602081018390529192508e917f37c8380b2284767eac942c610487f999ad4aa72b275e8af54bf32e4de2fc7d74910160405180910390a250505b5050505050610b4d6114ab565b505050505050565b60006001600982015460ff166001811115610b7257610b72612cae565b03610b9057604051633ee5aeb560e01b815260040160405180910390fd5b6009810180546001919060ff191682805b021790555050565b6001600160a01b038281166000908152600760205260408120549091829182918291161580610bf257506001600160a01b03858116600090815260078301602052604090205416155b15610c1057604051637d53846960e11b815260040160405180910390fd5b6001600160a01b038087166000908152600783016020526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a09291908290030181865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190612e03565b5050506001600160a01b03808a166000908152600787016020526040808220548151633fabe5a360e21b81529151959750939550909384939092169163feaf968c9160048082019260a0929091908290030181865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190612e03565b505050915091508260001480610d2f575080155b15610d4c5760405162bfc92160e01b815260040160405180910390fd5b6000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612e5b565b60ff16905081610dc182600a612f78565b610dcb9086612f84565b610dd59190612f9b565b9b949a50919850929650505050505050565b816060015182604001511115610e10576040516314152b8b60e31b815260040160405180910390fd5b6040805160c08101825260208085018051516001600160a01b03908116845260038601548116838501526001860154811694840194909452855160608401525101516080820152825490911660a08201526000610e6c82611d9f565b60018401548551919250600091610e8e916001600160a01b0316908490611f81565b90508460600151811115610eca57606085015160405163ba639fe360e01b81526004810191909152602481018290526044015b60405180910390fd5b600784015415611118576001600685015460ff166002811115610eef57610eef612cae565b148015610f00575060078401548111155b15610f1e576040516335b23ef160e21b815260040160405180910390fd5b6002600685015460ff166002811115610f3957610f39612cae565b036111185760018401546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190612e5b565b610fb990600a612fbd565b60408701516002870154610fcd9190612f84565b610fd79190612f9b565b905060008560010160000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190612e5b565b61106290600a612fbd565b602287015460028801546110769190612f84565b6110809190612f9b565b9050818111156111155760008161271061109a8583612fcc565b6110a49190612f84565b6110ae9190612f9b565b60078801549091508110611113576009870154158015906110dc575060098701546110d98484612fcc565b10155b156110fa57604051632dd2c8eb60e01b815260040160405180910390fd5b604051632da8090b60e11b815260040160405180910390fd5b505b50505b845160048501805460009061112e908490612fcc565b90915550506022840154600285015460009161114991612f84565b600286015490915061115c908490612fdf565b6002860181905560408701516111729085612f84565b61117c9083612fdf565b6111869190612f9b565b6022860155604086015160058601546000916111a691859190600161201a565b60038701549091506000906111c3906001600160a01b03166113c4565b905060016016880154610100900460ff1660028111156111e5576111e5612cae565b0361121b57600287015460178801546127109161120191612f84565b61120b9190612f9b565b601a8801556002870154601c8801555b600b870154158015906112305750600e870154155b801561123e5750600c870154155b156112b15760408051608081018252895181526020810187905260048901548183015260028901546060820152602289015491518b927ffdfb83eca0ae40fff97d8332ccf8e5e4b99950a8e2378334629e3c9c3bd880a2926112a4928792908790612ff2565b60405180910390a26113b9565b600e87015415611345576040805160808101825289518152602080820188905260048a01548284015260028a0154606083015260228a0154835180850185528b8301546001600160501b038082168352600160501b909104169281019290925292518c937f6fda3a0553e5147e61d6042180f5ea24dc35ee5486b8b528879c780f6effd8c4936112a4938893919291613039565b600c870154156113b95760408051608081018252895181526020810187905260048901548183015260028901546060820152602289015491518b927f0cf7f396530d87e85b917a0b8afe8eba55962d166b2b78cc2d99e71f2381aaac926113b0928792908790612ff2565b60405180910390a25b505050505050505050565b6001600160a01b03818116600090815260076020526040812054909182911661140057604051637d53846960e11b815260040160405180910390fd5b6001600160a01b038084166000908152600783016020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a0929091908290030181865afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190612e03565b505050915050806000036114a45760405162bfc92160e01b815260040160405180910390fd5b9392505050565b60098054600091829160ff1916600183610ba1565b600060018260028111156114d6576114d6612cae565b036114ee576114e783610e10612f84565b905061074c565b600282600281111561150257611502612cae565b03611514576114e78362015180612f84565b60405163265f13bd60e21b815260040160405180910390fd5b60008260000361153f575060016114a4565b600061154b8486612fcc565b83111561155957600061155c565b60015b95945050505050565b600086815260066020818152604080842081516102008101835281546001600160a01b03908116825283516103e0810185526001840180548316825260028086015483890152600386015490931695820195909552600484015460608201526005840154608082015295830154919592948601939160a084019160ff909116908111156115f4576115f4612cae565b600281111561160557611605612cae565b815260068201546020820152600782015460ff8082161515604084015261010090910481161515606083015260088301546080830152600983015460a09092019116600181111561165857611658612cae565b600181111561166957611669612cae565b8152600a8201546020820152600b8201546040820152600c82015460609091019060ff16600281111561169e5761169e612cae565b60028111156116af576116af612cae565b8152600d8201546020820152600e82015460409091019060ff1660048111156116da576116da612cae565b60048111156116eb576116eb612cae565b8152602001600e820160019054906101000a900460ff16600281111561171357611713612cae565b600281111561172457611724612cae565b8152600f8201546020820152601082015460409091019060ff16600281111561174f5761174f612cae565b600281111561176057611760612cae565b815260118201546020820152601282015460408201526013820154606082015260148201546080820152601582015460a09091019060ff1660048111156117a9576117a9612cae565b60048111156117ba576117ba612cae565b81526020016015820160019054906101000a900460ff1660028111156117e2576117e2612cae565b60028111156117f3576117f3612cae565b81526016820154602082015260178201546040820152601882015460609091019060ff16600281111561182857611828612cae565b600281111561183957611839612cae565b81526018919091015461010080820460ff908116151560208086019190915262010000840482161515604080870191909152630100000090940482161515606095860152948652601a87015486860152601b87015492860192909252601c86015492850192909252601d8501546080850152601e85015460a0850152601f85015460c0850152918401546001600160501b0380821660e0860152600160501b8204811692850192909252600160a01b900481166101208401526021840154166101408301526022830154610160830152602383015461018083015260248301546101a083015260258301546101c09092019116600281111561193d5761193d612cae565b600281111561194e5761194e612cae565b815250509050846001600160501b0316836001600160501b031610806119855750836001600160501b0316826001600160501b0316105b156119a35760405163de6cbbaf60e01b815260040160405180910390fd5b846001600160501b03168161010001516001600160501b031611806119de5750826001600160501b03168161010001516001600160501b0316115b806119ff5750836001600160501b03168161012001516001600160501b0316115b80611a205750816001600160501b03168161012001516001600160501b0316115b15611a3e5760405163de6cbbaf60e01b815260040160405180910390fd5b6000611a5c8686846020015160000151856020015160400151612112565b90506000611a7c8585856020015160000151866020015160400151612112565b9050600383602001516101e001516004811115611a9b57611a9b612cae565b1480611ac15750600283602001516101e001516004811115611abf57611abf612cae565b145b15611ae75780881015611ae75760405163aac9fd8760e01b815260040160405180910390fd5b600483602001516101e001516004811115611b0457611b04612cae565b1480611b2a5750600183602001516101e001516004811115611b2857611b28612cae565b145b15611b505780881115611b505760405163aac9fd8760e01b815260040160405180910390fd5b60208301516101c00151600080600386602001516101e001516004811115611b7a57611b7a612cae565b1480611ba05750600286602001516101e001516004811115611b9e57611b9e612cae565b145b15611bd35784841015611bc6576040516321376cef60e21b815260040160405180910390fd5b611bd08585612fcc565b90505b600486602001516101e001516004811115611bf057611bf0612cae565b1480611c165750600186602001516101e001516004811115611c1457611c14612cae565b145b15611c495784841115611c3c576040516321376cef60e21b815260040160405180910390fd5b611c468486612fcc565b91505b600386602001516101e001516004811115611c6657611c66612cae565b148015611c7257508083115b15611c90576040516321376cef60e21b815260040160405180910390fd5b600486602001516101e001516004811115611cad57611cad612cae565b148015611cb957508183115b15611cd7576040516321376cef60e21b815260040160405180910390fd5b600286602001516101e001516004811115611cf457611cf4612cae565b148015611d16575084611d0982612710612f84565b611d139190612f9b565b83115b15611d34576040516321376cef60e21b815260040160405180910390fd5b600186602001516101e001516004811115611d5157611d51612cae565b148015611d73575084611d6683612710612f84565b611d709190612f9b565b83115b15611d91576040516321376cef60e21b815260040160405180910390fd5b505050505050505050505050565b6060810151600090808203611dc75760405163391b81e760e21b815260040160405180910390fd5b611ddb83602001518460a001513084612351565b6000611deb84604001513061246a565b9050611e048460200151856000015186606001516124d8565b60008085600001516001600160a01b03168660800151604051611e2791906130c0565b6000604051808303816000865af19150503d8060008114611e64576040519150601f19603f3d011682016040523d82523d6000602084013e611e69565b606091505b509150915081611e9a576000611e7e8261256d565b90508060405162461bcd60e51b8152600401610ec191906130dc565b6000611eaa87604001513061246a565b90506000611eb88583612fcc565b905080600003611edb5760405163081ceff360e41b815260040160405180910390fd5b611eee88604001518960a00151836125e4565b7f4abed91e53b10abbb1440578b29fa1b1d1b2fd1aea643d553ccf19cd4642f4d8886000015189602001518a604001518b60600151858d60a00151604051611f6e969594939291906001600160a01b039687168152948616602086015292851660408501526060840191909152608083015290911660a082015260c00190565b60405180910390a1979650505050505050565b6000808490506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190612e5b565b60ff16905084611ffc82600a612f78565b6120069086612f84565b6120109190612f9b565b9695505050505050565b6000808561202a61271087612f84565b6120349190612f9b565b9050828015612044575061271081105b801561205a57508361205882612710612fcc565b115b1561207857604051630b9750cb60e41b815260040160405180910390fd5b82158015612087575061271081115b801561209d57508361209b61271083612fcc565b115b156120bb57604051630b9750cb60e41b815260040160405180910390fd5b60008380156120cb575061271082105b156120e3576120dc82612710612fcc565b9050612106565b831580156120f2575061271082115b156121065761210361271083612fcc565b90505b9150505b949350505050565b6001600160a01b038281166000908152600760205260408120549091829116158061215757506001600160a01b03838116600090815260078301602052604090205416155b1561217557604051637d53846960e11b815260040160405180910390fd5b6001600160a01b038481166000908152600783016020526040808220549051639a6fc8f560e01b81526001600160501b038a16600482015291921690639a6fc8f59060240160a060405180830381865afa1580156121d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fb9190612e03565b5050506001600160a01b038681166000908152600786016020526040808220549051639a6fc8f560e01b81526001600160501b038c1660048201529395509093501690639a6fc8f59060240160a060405180830381865afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190612e03565b505050915050816000148061229b575080155b156122b85760405162bfc92160e01b815260040160405180910390fd5b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190612e5b565b60ff16905060008261232f83600a612f78565b6123399086612f84565b6123439190612f9b565b9a9950505050505050505050565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908616906370a0823190602401602060405180830381865afa15801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf919061310f565b90506123cd858585856126fb565b6040516370a0823160e01b81526001600160a01b038481166004830152839183918816906370a0823190602401602060405180830381865afa158015612417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243b919061310f565b6124459190612fcc565b14612463576040516312171d8360e31b815260040160405180910390fd5b5050505050565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a0823190602401602060405180830381865afa1580156124b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a4919061310f565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b919061310f565b10156125685761255d83836000612766565b612568838383612766565b505050565b60606044825110156125b257505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60006125ce60048085516125c69190612fcc565b85919061287b565b9050808060200190518101906114a49190613128565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa15801561262e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612652919061310f565b905061265f848484612945565b6040516370a0823160e01b81526001600160a01b038481166004830152839183918716906370a0823190602401602060405180830381865afa1580156126a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cd919061310f565b6126d79190612fcc565b146126f5576040516312171d8360e31b815260040160405180910390fd5b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526126f59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612975565b8015806127e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156127ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127de919061310f565b155b61284b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610ec1565b6040516001600160a01b03831660248201526044810182905261256890849063095ea7b360e01b9060640161272f565b60608161288981601f612fdf565b10156128a8576040516323d5783d60e11b815260040160405180910390fd5b6128b28284612fdf565b845110156128d357604051633b99b53d60e01b815260040160405180910390fd5b6060821580156128f2576040519150600082526020820160405261293c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561292b578051835260209283019201612913565b5050858452601f01601f1916604052505b50949350505050565b6040516001600160a01b03831660248201526044810182905261256890849063a9059cbb60e01b9060640161272f565b60006129ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a4a9092919063ffffffff16565b90508051600014806129eb5750808060200190518101906129eb9190613196565b6125685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ec1565b606061210a848460008585600080866001600160a01b03168587604051612a7191906130c0565b60006040518083038185875af1925050503d8060008114612aae576040519150601f19603f3d011682016040523d82523d6000602084013e612ab3565b606091505b5091509150612ac487838387612acf565b979650505050505050565b60608315612b3e578251600003612b37576001600160a01b0385163b612b375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ec1565b508161210a565b61210a8383815115612b535781518083602001fd5b8060405162461bcd60e51b8152600401610ec191906130dc565b600060408284031215612b7f57600080fd5b50919050565b60008060408385031215612b9857600080fd5b82359150602083013567ffffffffffffffff811115612bb657600080fd5b612bc285828601612b6d565b9150509250929050565b8015158114612bda57600080fd5b50565b60008060408385031215612bf057600080fd5b8235612bfb81612bcc565b946020939093013593505050565b6001600160501b0381168114612bda57600080fd5b60008060008060008060c08789031215612c3757600080fd5b863595506020870135612c4981612c09565b94506040870135612c5981612c09565b93506060870135612c6981612c09565b92506080870135612c7981612c09565b915060a087013567ffffffffffffffff811115612c9557600080fd5b612ca189828a01612b6d565b9150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cfd57612cfd612cc4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d2c57612d2c612cc4565b604052919050565b600067ffffffffffffffff821115612d4e57612d4e612cc4565b50601f01601f191660200190565b600060408236031215612d6e57600080fd5b612d76612cda565b82356001600160a01b0381168114612d8d57600080fd5b815260208381013567ffffffffffffffff811115612daa57600080fd5b840136601f820112612dbb57600080fd5b8035612dce612dc982612d34565b612d03565b8181523684838501011115612de257600080fd5b81848401858301376000918101840191909152918301919091525092915050565b600080600080600060a08688031215612e1b57600080fd5b8551612e2681612c09565b809550506020860151935060408601519250606086015191506080860151612e4d81612c09565b809150509295509295909350565b600060208284031215612e6d57600080fd5b815160ff811681146114a457600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612ecf578160001904821115612eb557612eb5612e7e565b80851615612ec257918102915b93841c9390800290612e99565b509250929050565b600082612ee65750600161074c565b81612ef35750600061074c565b8160018114612f095760028114612f1357612f2f565b600191505061074c565b60ff841115612f2457612f24612e7e565b50506001821b61074c565b5060208310610133831016604e8410600b8410161715612f52575081810a61074c565b612f5c8383612e94565b8060001904821115612f7057612f70612e7e565b029392505050565b60006114a48383612ed7565b808202811582820484141761074c5761074c612e7e565b600082612fb857634e487b7160e01b600052601260045260246000fd5b500490565b60006114a460ff841683612ed7565b8181038181111561074c5761074c612e7e565b8082018082111561074c5761074c612e7e565b84815260e081016130276020830186805182526020810151602083015260408101516040830152606081015160608301525050565b60a082019390935260c0015292915050565b848152610100810161306f6020830186805182526020810151602083015260408101516040830152606081015160608301525050565b8360a08301526001600160501b038084511660c08401528060208501511660e08401525095945050505050565b60005b838110156130b757818101518382015260200161309f565b50506000910152565b600082516130d281846020870161309c565b9190910192915050565b60208152600082518060208401526130fb81604085016020870161309c565b601f01601f19169190910160400192915050565b60006020828403121561312157600080fd5b5051919050565b60006020828403121561313a57600080fd5b815167ffffffffffffffff81111561315157600080fd5b8201601f8101841361316257600080fd5b8051613170612dc982612d34565b81815285602083850101111561318557600080fd5b61155c82602083016020860161309c565b6000602082840312156131a857600080fd5b81516114a481612bcc56fea2646970667358221220b79dd79582a8263823c4b131e4f7b98fd6831e54729ec8f0a4fda63a1c7df71164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ef343ba146100515780633219d4ba146100665780636a4df2541461008b57806381f989771461009e575b600080fd5b61006461005f366004612b85565b6100b1565b005b610079610074366004612bdd565b61029a565b60405190815260200160405180910390f35b610064610099366004612b85565b610752565b6100646100ac366004612c1e565b610968565b6100b9610b55565b600082815260066020526040812090602582015460ff1660028111156100e1576100e1612cae565b146100ff5760405163432aa98d60e11b815260040160405180910390fd5b600b8101546000036101245760405163c5d53c0b60e01b815260040160405180910390fd5b600e8101541515806101395750600c81015415155b1561015757604051633bd7ca8d60e11b815260040160405180910390fd5b600481015460000361017c5760405163391b81e760e21b815260040160405180910390fd5b6001810154600382015460009161019f916001600160a01b039182169116610ba9565b5050905060006101b060018661029a565b90506101eb856040518060800160405280848152602001876101d190612d5c565b815260208101869052600b87015460409091015285610de7565b60128301541580156101ff57506007830154155b1561028b5760258301805460ff19166002179055600183015460009061022d906001600160a01b03166113c4565b600385015490915060009061024a906001600160a01b03166113c4565b604080518481526020810183905291925088917f37c8380b2284767eac942c610487f999ad4aa72b275e8af54bf32e4de2fc7d74910160405180910390a250505b5050506102966114ab565b5050565b600081815260066020818152604080842081516102008101835281546001600160a01b03908116825283516103e0810185526001840180548316825260028086015483890152600386015490931695820195909552600484015460608201526005840154608082015295830154879687969395938601939092909160a084019160ff9091169081111561032f5761032f612cae565b600281111561034057610340612cae565b815260068201546020820152600782015460ff8082161515604084015261010090910481161515606083015260088301546080830152600983015460a09092019116600181111561039357610393612cae565b60018111156103a4576103a4612cae565b8152600a8201546020820152600b8201546040820152600c82015460609091019060ff1660028111156103d9576103d9612cae565b60028111156103ea576103ea612cae565b8152600d8201546020820152600e82015460409091019060ff16600481111561041557610415612cae565b600481111561042657610426612cae565b8152602001600e820160019054906101000a900460ff16600281111561044e5761044e612cae565b600281111561045f5761045f612cae565b8152600f8201546020820152601082015460409091019060ff16600281111561048a5761048a612cae565b600281111561049b5761049b612cae565b815260118201546020820152601282015460408201526013820154606082015260148201546080820152601582015460a09091019060ff1660048111156104e4576104e4612cae565b60048111156104f5576104f5612cae565b81526020016015820160019054906101000a900460ff16600281111561051d5761051d612cae565b600281111561052e5761052e612cae565b81526016820154602082015260178201546040820152601882015460609091019060ff16600281111561056357610563612cae565b600281111561057457610574612cae565b81526018919091015461010080820460ff908116151560208086019190915262010000840482161515604080870191909152630100000090940482161515606095860152948652601a87015486860152601b87015492860192909252601c86015492850192909252601d8501546080850152601e85015460a0850152601f85015460c0850152918401546001600160501b0380821660e0860152600160501b8204811692850192909252600160a01b900481166101208401526021840154166101408301526022830154610160830152602383015461018083015260248301546101a083015260258301546101c09092019116600281111561067857610678612cae565b600281111561068957610689612cae565b905250905084156106a4578060200151606001519150610748565b60028160200151610200015160028111156106c1576106c1612cae565b036106fc576020810151610220810151606090910151116106ea578060200151606001516106f5565b806020015161022001515b9150610748565b600181602001516102000151600281111561071957610719612cae565b036107485780606001518160200151606001511161073f57806020015160600151610745565b80606001515b91505b5090505b92915050565b61075a610b55565b600082815260066020526040812090602582015460ff16600281111561078257610782612cae565b146107a05760405163432aa98d60e11b815260040160405180910390fd5b600c8101546000036107c55760405163634c458f60e11b815260040160405180910390fd5b60048101546000036107ea5760405163391b81e760e21b815260040160405180910390fd5b6001810154600382015460009161080d916001600160a01b039182169116610ba9565b5050600c830154600d84015491925060009161082c919060ff166114c0565b9050600061083f4285601f01548461152d565b90508061085f57604051633de1e42960e21b815260040160405180910390fd5b600061086c60008861029a565b90506108a78760405180608001604052808481526020018961088d90612d5c565b815260208101889052600b89015460409091015287610de7565b42601f86015560128501541580156108c157506007850154155b80156108cf57506004850154155b1561095b5760258501805460ff1916600217905560018501546000906108fd906001600160a01b03166113c4565b600387015490915060009061091a906001600160a01b03166113c4565b60408051848152602081018390529192508a917f37c8380b2284767eac942c610487f999ad4aa72b275e8af54bf32e4de2fc7d74910160405180910390a250505b50505050506102966114ab565b610970610b55565b600086815260066020526040812090602582015460ff16600281111561099857610998612cae565b146109b65760405163432aa98d60e11b815260040160405180910390fd5b600e8101546000036109db57604051637149a30f60e11b815260040160405180910390fd5b6004810154600003610a005760405163391b81e760e21b815260040160405180910390fd5b6001810154600382015460009182918291610a27916001600160a01b039182169116610ba9565b925092509250610a3b8a848b8b8b8b611565565b6020840180546001600160501b03838116600160501b026001600160a01b0319909216908516171790556000610a71818c61029a565b9050610a928b60405180608001604052808481526020018961088d90612d5c565b6012850154158015610aa657506007850154155b8015610ab457506004850154155b15610b405760258501805460ff191660021790556001850154600090610ae2906001600160a01b03166113c4565b6003870154909150600090610aff906001600160a01b03166113c4565b60408051848152602081018390529192508e917f37c8380b2284767eac942c610487f999ad4aa72b275e8af54bf32e4de2fc7d74910160405180910390a250505b5050505050610b4d6114ab565b505050505050565b60006001600982015460ff166001811115610b7257610b72612cae565b03610b9057604051633ee5aeb560e01b815260040160405180910390fd5b6009810180546001919060ff191682805b021790555050565b6001600160a01b038281166000908152600760205260408120549091829182918291161580610bf257506001600160a01b03858116600090815260078301602052604090205416155b15610c1057604051637d53846960e11b815260040160405180910390fd5b6001600160a01b038087166000908152600783016020526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a09291908290030181865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190612e03565b5050506001600160a01b03808a166000908152600787016020526040808220548151633fabe5a360e21b81529151959750939550909384939092169163feaf968c9160048082019260a0929091908290030181865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190612e03565b505050915091508260001480610d2f575080155b15610d4c5760405162bfc92160e01b815260040160405180910390fd5b6000896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612e5b565b60ff16905081610dc182600a612f78565b610dcb9086612f84565b610dd59190612f9b565b9b949a50919850929650505050505050565b816060015182604001511115610e10576040516314152b8b60e31b815260040160405180910390fd5b6040805160c08101825260208085018051516001600160a01b03908116845260038601548116838501526001860154811694840194909452855160608401525101516080820152825490911660a08201526000610e6c82611d9f565b60018401548551919250600091610e8e916001600160a01b0316908490611f81565b90508460600151811115610eca57606085015160405163ba639fe360e01b81526004810191909152602481018290526044015b60405180910390fd5b600784015415611118576001600685015460ff166002811115610eef57610eef612cae565b148015610f00575060078401548111155b15610f1e576040516335b23ef160e21b815260040160405180910390fd5b6002600685015460ff166002811115610f3957610f39612cae565b036111185760018401546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190612e5b565b610fb990600a612fbd565b60408701516002870154610fcd9190612f84565b610fd79190612f9b565b905060008560010160000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190612e5b565b61106290600a612fbd565b602287015460028801546110769190612f84565b6110809190612f9b565b9050818111156111155760008161271061109a8583612fcc565b6110a49190612f84565b6110ae9190612f9b565b60078801549091508110611113576009870154158015906110dc575060098701546110d98484612fcc565b10155b156110fa57604051632dd2c8eb60e01b815260040160405180910390fd5b604051632da8090b60e11b815260040160405180910390fd5b505b50505b845160048501805460009061112e908490612fcc565b90915550506022840154600285015460009161114991612f84565b600286015490915061115c908490612fdf565b6002860181905560408701516111729085612f84565b61117c9083612fdf565b6111869190612f9b565b6022860155604086015160058601546000916111a691859190600161201a565b60038701549091506000906111c3906001600160a01b03166113c4565b905060016016880154610100900460ff1660028111156111e5576111e5612cae565b0361121b57600287015460178801546127109161120191612f84565b61120b9190612f9b565b601a8801556002870154601c8801555b600b870154158015906112305750600e870154155b801561123e5750600c870154155b156112b15760408051608081018252895181526020810187905260048901548183015260028901546060820152602289015491518b927ffdfb83eca0ae40fff97d8332ccf8e5e4b99950a8e2378334629e3c9c3bd880a2926112a4928792908790612ff2565b60405180910390a26113b9565b600e87015415611345576040805160808101825289518152602080820188905260048a01548284015260028a0154606083015260228a0154835180850185528b8301546001600160501b038082168352600160501b909104169281019290925292518c937f6fda3a0553e5147e61d6042180f5ea24dc35ee5486b8b528879c780f6effd8c4936112a4938893919291613039565b600c870154156113b95760408051608081018252895181526020810187905260048901548183015260028901546060820152602289015491518b927f0cf7f396530d87e85b917a0b8afe8eba55962d166b2b78cc2d99e71f2381aaac926113b0928792908790612ff2565b60405180910390a25b505050505050505050565b6001600160a01b03818116600090815260076020526040812054909182911661140057604051637d53846960e11b815260040160405180910390fd5b6001600160a01b038084166000908152600783016020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a0929091908290030181865afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190612e03565b505050915050806000036114a45760405162bfc92160e01b815260040160405180910390fd5b9392505050565b60098054600091829160ff1916600183610ba1565b600060018260028111156114d6576114d6612cae565b036114ee576114e783610e10612f84565b905061074c565b600282600281111561150257611502612cae565b03611514576114e78362015180612f84565b60405163265f13bd60e21b815260040160405180910390fd5b60008260000361153f575060016114a4565b600061154b8486612fcc565b83111561155957600061155c565b60015b95945050505050565b600086815260066020818152604080842081516102008101835281546001600160a01b03908116825283516103e0810185526001840180548316825260028086015483890152600386015490931695820195909552600484015460608201526005840154608082015295830154919592948601939160a084019160ff909116908111156115f4576115f4612cae565b600281111561160557611605612cae565b815260068201546020820152600782015460ff8082161515604084015261010090910481161515606083015260088301546080830152600983015460a09092019116600181111561165857611658612cae565b600181111561166957611669612cae565b8152600a8201546020820152600b8201546040820152600c82015460609091019060ff16600281111561169e5761169e612cae565b60028111156116af576116af612cae565b8152600d8201546020820152600e82015460409091019060ff1660048111156116da576116da612cae565b60048111156116eb576116eb612cae565b8152602001600e820160019054906101000a900460ff16600281111561171357611713612cae565b600281111561172457611724612cae565b8152600f8201546020820152601082015460409091019060ff16600281111561174f5761174f612cae565b600281111561176057611760612cae565b815260118201546020820152601282015460408201526013820154606082015260148201546080820152601582015460a09091019060ff1660048111156117a9576117a9612cae565b60048111156117ba576117ba612cae565b81526020016015820160019054906101000a900460ff1660028111156117e2576117e2612cae565b60028111156117f3576117f3612cae565b81526016820154602082015260178201546040820152601882015460609091019060ff16600281111561182857611828612cae565b600281111561183957611839612cae565b81526018919091015461010080820460ff908116151560208086019190915262010000840482161515604080870191909152630100000090940482161515606095860152948652601a87015486860152601b87015492860192909252601c86015492850192909252601d8501546080850152601e85015460a0850152601f85015460c0850152918401546001600160501b0380821660e0860152600160501b8204811692850192909252600160a01b900481166101208401526021840154166101408301526022830154610160830152602383015461018083015260248301546101a083015260258301546101c09092019116600281111561193d5761193d612cae565b600281111561194e5761194e612cae565b815250509050846001600160501b0316836001600160501b031610806119855750836001600160501b0316826001600160501b0316105b156119a35760405163de6cbbaf60e01b815260040160405180910390fd5b846001600160501b03168161010001516001600160501b031611806119de5750826001600160501b03168161010001516001600160501b0316115b806119ff5750836001600160501b03168161012001516001600160501b0316115b80611a205750816001600160501b03168161012001516001600160501b0316115b15611a3e5760405163de6cbbaf60e01b815260040160405180910390fd5b6000611a5c8686846020015160000151856020015160400151612112565b90506000611a7c8585856020015160000151866020015160400151612112565b9050600383602001516101e001516004811115611a9b57611a9b612cae565b1480611ac15750600283602001516101e001516004811115611abf57611abf612cae565b145b15611ae75780881015611ae75760405163aac9fd8760e01b815260040160405180910390fd5b600483602001516101e001516004811115611b0457611b04612cae565b1480611b2a5750600183602001516101e001516004811115611b2857611b28612cae565b145b15611b505780881115611b505760405163aac9fd8760e01b815260040160405180910390fd5b60208301516101c00151600080600386602001516101e001516004811115611b7a57611b7a612cae565b1480611ba05750600286602001516101e001516004811115611b9e57611b9e612cae565b145b15611bd35784841015611bc6576040516321376cef60e21b815260040160405180910390fd5b611bd08585612fcc565b90505b600486602001516101e001516004811115611bf057611bf0612cae565b1480611c165750600186602001516101e001516004811115611c1457611c14612cae565b145b15611c495784841115611c3c576040516321376cef60e21b815260040160405180910390fd5b611c468486612fcc565b91505b600386602001516101e001516004811115611c6657611c66612cae565b148015611c7257508083115b15611c90576040516321376cef60e21b815260040160405180910390fd5b600486602001516101e001516004811115611cad57611cad612cae565b148015611cb957508183115b15611cd7576040516321376cef60e21b815260040160405180910390fd5b600286602001516101e001516004811115611cf457611cf4612cae565b148015611d16575084611d0982612710612f84565b611d139190612f9b565b83115b15611d34576040516321376cef60e21b815260040160405180910390fd5b600186602001516101e001516004811115611d5157611d51612cae565b148015611d73575084611d6683612710612f84565b611d709190612f9b565b83115b15611d91576040516321376cef60e21b815260040160405180910390fd5b505050505050505050505050565b6060810151600090808203611dc75760405163391b81e760e21b815260040160405180910390fd5b611ddb83602001518460a001513084612351565b6000611deb84604001513061246a565b9050611e048460200151856000015186606001516124d8565b60008085600001516001600160a01b03168660800151604051611e2791906130c0565b6000604051808303816000865af19150503d8060008114611e64576040519150601f19603f3d011682016040523d82523d6000602084013e611e69565b606091505b509150915081611e9a576000611e7e8261256d565b90508060405162461bcd60e51b8152600401610ec191906130dc565b6000611eaa87604001513061246a565b90506000611eb88583612fcc565b905080600003611edb5760405163081ceff360e41b815260040160405180910390fd5b611eee88604001518960a00151836125e4565b7f4abed91e53b10abbb1440578b29fa1b1d1b2fd1aea643d553ccf19cd4642f4d8886000015189602001518a604001518b60600151858d60a00151604051611f6e969594939291906001600160a01b039687168152948616602086015292851660408501526060840191909152608083015290911660a082015260c00190565b60405180910390a1979650505050505050565b6000808490506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190612e5b565b60ff16905084611ffc82600a612f78565b6120069086612f84565b6120109190612f9b565b9695505050505050565b6000808561202a61271087612f84565b6120349190612f9b565b9050828015612044575061271081105b801561205a57508361205882612710612fcc565b115b1561207857604051630b9750cb60e41b815260040160405180910390fd5b82158015612087575061271081115b801561209d57508361209b61271083612fcc565b115b156120bb57604051630b9750cb60e41b815260040160405180910390fd5b60008380156120cb575061271082105b156120e3576120dc82612710612fcc565b9050612106565b831580156120f2575061271082115b156121065761210361271083612fcc565b90505b9150505b949350505050565b6001600160a01b038281166000908152600760205260408120549091829116158061215757506001600160a01b03838116600090815260078301602052604090205416155b1561217557604051637d53846960e11b815260040160405180910390fd5b6001600160a01b038481166000908152600783016020526040808220549051639a6fc8f560e01b81526001600160501b038a16600482015291921690639a6fc8f59060240160a060405180830381865afa1580156121d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fb9190612e03565b5050506001600160a01b038681166000908152600786016020526040808220549051639a6fc8f560e01b81526001600160501b038c1660048201529395509093501690639a6fc8f59060240160a060405180830381865afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190612e03565b505050915050816000148061229b575080155b156122b85760405162bfc92160e01b815260040160405180910390fd5b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190612e5b565b60ff16905060008261232f83600a612f78565b6123399086612f84565b6123439190612f9b565b9a9950505050505050505050565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908616906370a0823190602401602060405180830381865afa15801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf919061310f565b90506123cd858585856126fb565b6040516370a0823160e01b81526001600160a01b038481166004830152839183918816906370a0823190602401602060405180830381865afa158015612417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243b919061310f565b6124459190612fcc565b14612463576040516312171d8360e31b815260040160405180910390fd5b5050505050565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a0823190602401602060405180830381865afa1580156124b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a4919061310f565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b919061310f565b10156125685761255d83836000612766565b612568838383612766565b505050565b60606044825110156125b257505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60006125ce60048085516125c69190612fcc565b85919061287b565b9050808060200190518101906114a49190613128565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa15801561262e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612652919061310f565b905061265f848484612945565b6040516370a0823160e01b81526001600160a01b038481166004830152839183918716906370a0823190602401602060405180830381865afa1580156126a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cd919061310f565b6126d79190612fcc565b146126f5576040516312171d8360e31b815260040160405180910390fd5b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526126f59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612975565b8015806127e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156127ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127de919061310f565b155b61284b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610ec1565b6040516001600160a01b03831660248201526044810182905261256890849063095ea7b360e01b9060640161272f565b60608161288981601f612fdf565b10156128a8576040516323d5783d60e11b815260040160405180910390fd5b6128b28284612fdf565b845110156128d357604051633b99b53d60e01b815260040160405180910390fd5b6060821580156128f2576040519150600082526020820160405261293c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561292b578051835260209283019201612913565b5050858452601f01601f1916604052505b50949350505050565b6040516001600160a01b03831660248201526044810182905261256890849063a9059cbb60e01b9060640161272f565b60006129ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a4a9092919063ffffffff16565b90508051600014806129eb5750808060200190518101906129eb9190613196565b6125685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ec1565b606061210a848460008585600080866001600160a01b03168587604051612a7191906130c0565b60006040518083038185875af1925050503d8060008114612aae576040519150601f19603f3d011682016040523d82523d6000602084013e612ab3565b606091505b5091509150612ac487838387612acf565b979650505050505050565b60608315612b3e578251600003612b37576001600160a01b0385163b612b375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ec1565b508161210a565b61210a8383815115612b535781518083602001fd5b8060405162461bcd60e51b8152600401610ec191906130dc565b600060408284031215612b7f57600080fd5b50919050565b60008060408385031215612b9857600080fd5b82359150602083013567ffffffffffffffff811115612bb657600080fd5b612bc285828601612b6d565b9150509250929050565b8015158114612bda57600080fd5b50565b60008060408385031215612bf057600080fd5b8235612bfb81612bcc565b946020939093013593505050565b6001600160501b0381168114612bda57600080fd5b60008060008060008060c08789031215612c3757600080fd5b863595506020870135612c4981612c09565b94506040870135612c5981612c09565b93506060870135612c6981612c09565b92506080870135612c7981612c09565b915060a087013567ffffffffffffffff811115612c9557600080fd5b612ca189828a01612b6d565b9150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cfd57612cfd612cc4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d2c57612d2c612cc4565b604052919050565b600067ffffffffffffffff821115612d4e57612d4e612cc4565b50601f01601f191660200190565b600060408236031215612d6e57600080fd5b612d76612cda565b82356001600160a01b0381168114612d8d57600080fd5b815260208381013567ffffffffffffffff811115612daa57600080fd5b840136601f820112612dbb57600080fd5b8035612dce612dc982612d34565b612d03565b8181523684838501011115612de257600080fd5b81848401858301376000918101840191909152918301919091525092915050565b600080600080600060a08688031215612e1b57600080fd5b8551612e2681612c09565b809550506020860151935060408601519250606086015191506080860151612e4d81612c09565b809150509295509295909350565b600060208284031215612e6d57600080fd5b815160ff811681146114a457600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612ecf578160001904821115612eb557612eb5612e7e565b80851615612ec257918102915b93841c9390800290612e99565b509250929050565b600082612ee65750600161074c565b81612ef35750600061074c565b8160018114612f095760028114612f1357612f2f565b600191505061074c565b60ff841115612f2457612f24612e7e565b50506001821b61074c565b5060208310610133831016604e8410600b8410161715612f52575081810a61074c565b612f5c8383612e94565b8060001904821115612f7057612f70612e7e565b029392505050565b60006114a48383612ed7565b808202811582820484141761074c5761074c612e7e565b600082612fb857634e487b7160e01b600052601260045260246000fd5b500490565b60006114a460ff841683612ed7565b8181038181111561074c5761074c612e7e565b8082018082111561074c5761074c612e7e565b84815260e081016130276020830186805182526020810151602083015260408101516040830152606081015160608301525050565b60a082019390935260c0015292915050565b848152610100810161306f6020830186805182526020810151602083015260408101516040830152606081015160608301525050565b8360a08301526001600160501b038084511660c08401528060208501511660e08401525095945050505050565b60005b838110156130b757818101518382015260200161309f565b50506000910152565b600082516130d281846020870161309c565b9190910192915050565b60208152600082518060208401526130fb81604085016020870161309c565b601f01601f19169190910160400192915050565b60006020828403121561312157600080fd5b5051919050565b60006020828403121561313a57600080fd5b815167ffffffffffffffff81111561315157600080fd5b8201601f8101841361316257600080fd5b8051613170612dc982612d34565b81815285602083850101111561318557600080fd5b61155c82602083016020860161309c565b6000602082840312156131a857600080fd5b81516114a481612bcc56fea2646970667358221220b79dd79582a8263823c4b131e4f7b98fd6831e54729ec8f0a4fda63a1c7df71164736f6c63430008140033",
  "devdoc": {
    "details": "BuyFacet specializes in verifying conditions related to limit price buys and Dollar-Cost Averaging (DCA) buys,      ensuring that the necessary criteria are met before executing a buy action.",
    "events": {
      "AssetSwapped(address,address,address,uint256,uint256,address)": {
        "params": {
          "account": "The address of the user account that initiated the swap.",
          "dex": "The address of the contract or dex used for the swap.",
          "fromAmount": "The amount of 'fromAsset' that was swapped.",
          "fromAsset": "The address of the asset swapped from.",
          "receivedAmount": "The amount of 'toAsset' received in the swap.",
          "toAsset": "The address of the asset received in the swap."
        }
      },
      "BTDExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,(uint80,uint80))": {
        "params": {
          "impact": "The allowable price impact percentage for the buy action.",
          "investPrice": "the average price at which invest tokens were bought.",
          "rounds": "the round Ids of invest and stable tokens.",
          "strategyId": "The unique ID of the strategy where the BTD action was executed.",
          "tokens": "tokens substracted and added into the users wallet"
        }
      },
      "BuyExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)": {
        "params": {
          "impact": "The allowable price impact percentage for the buy action.",
          "investPrice": "the average price at which invest tokens were bought.",
          "stablePriceInUSD": "price of stable token in USD",
          "strategyId": "The unique ID of the strategy where the buy action was executed.",
          "tokens": "tokens substracted and added into the users wallet"
        }
      },
      "BuyTwapExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)": {
        "params": {
          "impact": "The allowable price impact percentage for the buy action.",
          "investPrice": "the average price at which invest tokens were bought.",
          "stablePriceInUSD": "price of stable token in USD",
          "strategyId": "The unique ID of the strategy where the Buy on TWAP action was executed.",
          "tokens": "tokens substracted and added into the users wallet"
        }
      },
      "StrategyCompleted(uint256,uint256,uint256)": {
        "params": {
          "investTokenPrice": "The price of the invest token in USD.",
          "stableTokenPrice": "The price of the stable token in USD.",
          "strategyId": "The unique ID of the completed strategy."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeBTD(uint256,uint80,uint80,uint80,uint80,(address,bytes))": {
        "params": {
          "fromInvestRoundId": "The starting invest round ID for monitoring price fluctuations.",
          "fromStableRoundId": "The starting stable round ID for monitoring price fluctuations.",
          "strategyId": "The unique ID of the trading strategy where the BTD action is executed.",
          "swap": "The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution.",
          "toInvestRoundId": "The ending invest round ID for monitoring price fluctuations.",
          "toStableRoundId": "The ending stable round ID for monitoring price fluctuations."
        }
      },
      "executeBuy(uint256,(address,bytes))": {
        "details": "The function validates strategy parameters, executes the buy action, and updates the strategy state.",
        "params": {
          "strategyId": "The unique ID of the strategy for which the buy action is executed.",
          "swap": "The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution."
        }
      },
      "executeBuyTwap(uint256,(address,bytes))": {
        "params": {
          "strategyId": "The unique ID of the strategy to execute the Buy on TWAP action.",
          "swap": "The Swap struct containing address of the decentralized exchange (DEX) and calldata containing data for interacting with the DEX during the execution."
        }
      },
      "executionBuyAmount(bool,uint256)": {
        "params": {
          "stableAmount": "Boolean flag indicating whether to consider the entire stable token amount.",
          "strategyId": "The unique ID of the strategy for which to calculate the buy value."
        },
        "returns": {
          "_0": "The calculated buy value based on the specified parameters."
        }
      }
    },
    "title": "BuyFacet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetSwapped(address,address,address,uint256,uint256,address)": {
        "notice": "Emitted when an asset swap has been executed successfully."
      },
      "BTDExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,(uint80,uint80))": {
        "notice": "Emitted when a Buy The Dip (BTD) action is executed for a trading strategy using a specific DEX, call data, buy value, and execution time."
      },
      "BuyExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)": {
        "notice": "Emitted when a buy action is executed for a trading strategy."
      },
      "BuyTwapExecuted(uint256,uint256,(uint256,uint256,uint256,uint256),uint256,uint256)": {
        "notice": "Emitted when a Buy on Time-Weighted Average Price (TWAP) action is executed for a trading strategy using a specific DEX, call data, buy value, and execution time."
      },
      "StrategyCompleted(uint256,uint256,uint256)": {
        "notice": "Emitted when a trade execution strategy is completed."
      }
    },
    "kind": "user",
    "methods": {
      "executeBTD(uint256,uint80,uint80,uint80,uint80,(address,bytes))": {
        "notice": "Executes a Buy-The-Dip (BTD) trading strategy action within a specified price range. This function allows the strategy to buy the invest token when its price decreases to a certain target value, following a specified DIP strategy type."
      },
      "executeBuy(uint256,(address,bytes))": {
        "notice": "Executes a buy action for a trading strategy based on specified conditions."
      },
      "executeBuyTwap(uint256,(address,bytes))": {
        "notice": "Executes a Buy on Time-Weighted Average Price (TWAP) action for a trading strategy."
      },
      "executionBuyAmount(bool,uint256)": {
        "notice": "Calculate the effective value for a buy action in a trading strategy."
      }
    },
    "notice": "This facet contains functions responsible for evaluating conditions necessary for executing buy actions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1498,
        "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1250_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(BuyLegType)1083": {
        "encoding": "inplace",
        "label": "enum BuyLegType",
        "numberOfBytes": "1"
      },
      "t_enum(DCA_UNIT)1100": {
        "encoding": "inplace",
        "label": "enum DCA_UNIT",
        "numberOfBytes": "1"
      },
      "t_enum(DIP_SPIKE)1095": {
        "encoding": "inplace",
        "label": "enum DIP_SPIKE",
        "numberOfBytes": "1"
      },
      "t_enum(FloorLegType)1079": {
        "encoding": "inplace",
        "label": "enum FloorLegType",
        "numberOfBytes": "1"
      },
      "t_enum(ReentrancyStatus)1069": {
        "encoding": "inplace",
        "label": "enum ReentrancyStatus",
        "numberOfBytes": "1"
      },
      "t_enum(SellLegType)1088": {
        "encoding": "inplace",
        "label": "enum SellLegType",
        "numberOfBytes": "1"
      },
      "t_enum(Status)1074": {
        "encoding": "inplace",
        "label": "enum Status",
        "numberOfBytes": "1"
      },
      "t_enum(TimeUnit)1105": {
        "encoding": "inplace",
        "label": "enum TimeUnit",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Strategy)1214_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)1214_storage"
      },
      "t_struct(AppStorage)1250_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1219,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "facets",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes4,t_bytes32)"
          },
          {
            "astId": 1223,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "selectorSlots",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 1225,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "selectorCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 1229,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "supportedInterfaces",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes4,t_bool)"
          },
          {
            "astId": 1231,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1233,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "nextStrategyId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1238,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "strategies",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Strategy)1214_storage)"
          },
          {
            "astId": 1242,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "feeds",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 1246,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "nonces",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1249,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "reentrancyStatus",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(ReentrancyStatus)1069"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Strategy)1214_storage": {
        "encoding": "inplace",
        "label": "struct Strategy",
        "members": [
          {
            "astId": 1181,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1184,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "parameters",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(StrategyParameters)1178_storage"
          },
          {
            "astId": 1186,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "sellPercentageAmount",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 1188,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "buyPercentageAmount",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256"
          },
          {
            "astId": 1190,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "sellPercentageTotalAmount",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 1192,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "buyPercentageTotalAmount",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 1194,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "sellTwapExecutedAt",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          },
          {
            "astId": 1196,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "buyTwapExecutedAt",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          },
          {
            "astId": 1198,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "investRoundIdForBTD",
            "offset": 0,
            "slot": "32",
            "type": "t_uint80"
          },
          {
            "astId": 1200,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "stableRoundIdForBTD",
            "offset": 10,
            "slot": "32",
            "type": "t_uint80"
          },
          {
            "astId": 1202,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "investRoundIdForSTR",
            "offset": 20,
            "slot": "32",
            "type": "t_uint80"
          },
          {
            "astId": 1204,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "stableRoundIdForSTR",
            "offset": 0,
            "slot": "33",
            "type": "t_uint80"
          },
          {
            "astId": 1206,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "investPrice",
            "offset": 0,
            "slot": "34",
            "type": "t_uint256"
          },
          {
            "astId": 1208,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "profit",
            "offset": 0,
            "slot": "35",
            "type": "t_uint256"
          },
          {
            "astId": 1210,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "budget",
            "offset": 0,
            "slot": "36",
            "type": "t_uint256"
          },
          {
            "astId": 1213,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "status",
            "offset": 0,
            "slot": "37",
            "type": "t_enum(Status)1074"
          }
        ],
        "numberOfBytes": "1216"
      },
      "t_struct(StrategyParameters)1178_storage": {
        "encoding": "inplace",
        "label": "struct StrategyParameters",
        "members": [
          {
            "astId": 1108,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_investToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1110,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_investAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1112,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_stableToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1114,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_stableAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1116,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_impact",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1119,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_floorType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(FloorLegType)1079"
          },
          {
            "astId": 1121,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_floorValue",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1123,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_liquidateOnFloor",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1125,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_cancelOnFloor",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 1127,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_minimumLoss",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1130,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_buyType",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(BuyLegType)1083"
          },
          {
            "astId": 1132,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_buyValue",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1134,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_buyTwapTime",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 1137,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_buyTwapTimeUnit",
            "offset": 0,
            "slot": "12",
            "type": "t_enum(TimeUnit)1105"
          },
          {
            "astId": 1139,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_btdValue",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 1142,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_btdType",
            "offset": 0,
            "slot": "14",
            "type": "t_enum(DIP_SPIKE)1095"
          },
          {
            "astId": 1145,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_buyDCAUnit",
            "offset": 1,
            "slot": "14",
            "type": "t_enum(DCA_UNIT)1100"
          },
          {
            "astId": 1147,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_buyDCAValue",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 1150,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_sellType",
            "offset": 0,
            "slot": "16",
            "type": "t_enum(SellLegType)1088"
          },
          {
            "astId": 1152,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_sellValue",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 1154,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_highSellValue",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 1156,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_minimumProfit",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 1158,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_strValue",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 1161,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_strType",
            "offset": 0,
            "slot": "21",
            "type": "t_enum(DIP_SPIKE)1095"
          },
          {
            "astId": 1164,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_sellDCAUnit",
            "offset": 1,
            "slot": "21",
            "type": "t_enum(DCA_UNIT)1100"
          },
          {
            "astId": 1166,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_sellDCAValue",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 1168,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_sellTwapTime",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 1171,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_sellTwapTimeUnit",
            "offset": 0,
            "slot": "24",
            "type": "t_enum(TimeUnit)1105"
          },
          {
            "astId": 1173,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_completeOnSell",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 1175,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_current_price_sell",
            "offset": 2,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 1177,
            "contract": "contracts/facets/BuyFacet.sol:BuyFacet",
            "label": "_current_price_buy",
            "offset": 3,
            "slot": "24",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "800"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}
